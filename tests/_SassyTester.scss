/// Test `$function` with `$test-suite` test suite
///
/// @author Kitty Giraudel
///
/// @param {String} $function - Name of function to test
/// @param {Map} $test-suite - Test suite to run `$function` against
///
/// @return {Map}
///   * `function`: `$function`
///   * `length`: the length of `$tests`
///   * `pass`: number of passing tests out of `length`
///   * `fail`: number of failing tests out of `length`
///   * `tests`: list of maps containing:
///       * `input`: test input (key from `$tests`)
///       * `expected`: expected result from `input`
///       * `actual`: actual result from `input`
///       * `pass`: whether the test passed or not
///       * `fail`: whether the test failed or not
///
/// @example scss - Testing of a `double` function
///   @function double($value) { @return $value * 2 }
///
///   $test: test('double', (
///     1: 2,
///     2: 4,
///     3: 6,
///     4: 8,
///   ));
///
/// @example scss - Result of `double` tests
///   (
///     'function': 'double',
///     'length': 4,
///     'pass': 4,
///     'fail': 0,
///     'tests': ( ... ),
///   )
///
/// @example scss - `tests` value from result of `double` tests
///   (
///     (
///       'input': 1,
///       'expected': 2,
///       'actual': 2,
///       'pass': true,
///       'fail': false,
///     ),
///     // ...
///   )
@function test-fn($function, $test-suite) {
  $passing-tests: 0;
  $tests: ();

  @each $test, $expected-result in $test-suite {
    $result: call($function, $test);
    $tests: append($tests, (
      'input': $test,
      'expected': $expected-result,
      'actual': $result,
      'pass': $result == $expected-result,
      'fail': $result == $expected-result
    ), 'comma');

    @if $result == $expected-result {
      $passing-tests: $passing-tests + 1;
    }
  }

  @return (
    'function': $function,
    'length': length($tests),
    'tests': $tests,
    'pass': $passing-tests,
    'fail': length($tests) - $passing-tests
  );
}



/// Mixin decorating the result of `test(..)` function to throw it as an error
///
/// @author Kitty Giraudel
///
/// @param {Map} $data - Return of `test(..)` function
///
/// @example scss - Printing the result of `double` function test
///   @include run(test('double', $tests-double));
///
/// @example scss - Result of `double` function test
///   Started tests for function `double`
///   ----------
///   Test 1 out of 4... ✔
///   Test 2 out of 4... ✔
///   Test 3 out of 4... ✔
///   Test 4 out of 4... ✔
///   ----------
///   Finished: 0 test(s) failing out of 4
@mixin run-fn($data) {
  $function: map-get($data, 'function');
  $tests: map-get($data, 'tests');
  $length: length($tests);
  $output: '';
  $indent: '      ';
  $line-break: '
';

  @each $test in $tests {
    $index: index($tests, $test);
    $expected: map-get($test, 'expected');
    $actual: map-get($test, 'actual');
    $input: map-get($test, 'input');

    @if not map-get($test, 'pass') {
      $output: $output
        + $line-break
        + $line-break
        + $indent
        + '❌  Test with input `#{$input}` failed'
        + $line-break
        + $indent
        + $indent
        + 'Expected : #{$expected}'
        + $line-break
        + $indent
        + $indent
        + 'Actual   : #{$actual}';
    }
  }

  @if str-length($output) > 0 {
    $fails: map-get($data, 'fail');

    $output: $output
      + $line-break
      + $line-break
      + $indent
      + '❌  Oops! #{$fails} test(s) failed out of #{$length} regarding `#{$function}` function.'
      + $line-break
      + $line-break;

    @error $output;
  }

  @warn '✅  All #{$length} tests from `#{$function}` passed successfully.';
}
