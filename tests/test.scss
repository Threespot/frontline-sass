// Import True
@import "true";
// Import Frontline
@import '../src/_frontline.scss';

//------------------------------------------------------------------------//
// Functions
//------------------------------------------------------------------------//
// @import 'functions/_breakpoint.scss';
// @import 'functions/_color-contrast.scss';
// @import 'functions/_color.scss';
// @import 'functions/_contains.scss';
// @import 'functions/_convert-units.scss';
// @import 'functions/_easings.scss';
// @import 'functions/_em.scss';
// @import 'functions/_inline-svg.scss';
// @import 'functions/_is-length.scss';
// @import 'functions/_map-functions.scss';
// @import 'functions/_math.scss';
// @import 'functions/_ratio.scss';
// @import 'functions/_rem.scss';
// @import 'functions/_slice.scss';
// @import 'functions/_str-replace.scss';
// @import 'functions/_str-to-num.scss';
// @import 'functions/_strip-unit.scss';
// @import 'functions/_z-index.scss';

//------------------------------------------------------------------------//
// Mixins
//------------------------------------------------------------------------//
// @import 'mixins/_absolute-fill.scss';
// @import 'mixins/_angle.scss';
// @import 'mixins/_aspect-ratio.scss';
// @import 'mixins/_burger-icon.scss';
// @import 'mixins/_clearfix.scss';
// @import 'mixins/_contrast-test.scss';
// @import 'mixins/_debug.scss';
// @import 'mixins/_font-smoothing.scss';
// @import 'mixins/_hide-text.scss';
// @import 'mixins/_link-colors.scss';
// @import 'mixins/_media-query.scss';
// @import 'mixins/_print-utils.scss';
// @import 'mixins/_pseudos.scss';
// @import 'mixins/_quantity.scss';
// @import 'mixins/_reset-elements.scss';
// @import 'mixins/_scale-text.scss';
// @import 'mixins/_selector-utils.scss';
// @import 'mixins/_text-inputs.scss';
// @import 'mixins/_text-rendering.scss';
// @import 'mixins/_triangle.scss';
// @import 'mixins/_vertical-center.scss';
// @import 'mixins/_visuallyhidden.scss';
// @import 'mixins/_word-break.scss';


@include test-module('Function: [fs-color]') {

  @include test('variable `fs-colors` should exist and be a map') {
    $exists: variable_exists(fs-colors);
    $expect: true;
    @include assert-equal($exists, $expect,
      '$fs-colors exists');

    $type: type-of($fs-colors);
    $expect: map;
    @include assert-equal($type, $expect,
      '$fs-colors is a map');
  }

  // Testing Color Function
  @include test('returns a color from the $fs-colors map') {
    $base: 'green';

    $test: fs-color($base);
    $expect: #2ecc40;
    @include assert-equal($test, $expect,
      'Returns a color from the global `fs-color map`');
  }
}


/* Before */
$new-colors: (
  "brand": (
    "red": #ff4136
  )
);
$fs-colors-original: $fs-colors;
$fs-colors: map-merge($fs-colors, $new-colors);

@include test-module('Function: [fs-color]') {

  // Testing Color Function
  @include test('returns a color that has been added to the $fs-color map') {
    $test: fs-color('brand', 'red');
    $expect: #ff4136;
    @include assert-equal($test, $expect,
      'Returns a color that was added to the global `fs-color map`');
  }
}
/* After */
$new-colors: null;
$fs-colors: $fs-colors-original;


  // // Testing Functions
  // @include test('Map Add [function]') {
  //   $base: (one: 1, two: 1, three: 1);
  //   $add: (one: 1, two: 2, three: -1);
  //
  //   $test: map-add($base, $add);
  //   $expect: (one: 2, two: 3, three: 0);
  //   @include assert-equal($test, $expect,
  //     'Returns the sum of two numeric maps');
  // }
  //
  // // Testing Mixins
  // @include test('Font Size [mixin]') {
  //   @include assert('Outputs a font size and line height based on keyword.') {
  //     @include output {
  //       @include font-size(large);
  //     }
  //
  //     @include expect {
  //       font-size: 2rem;
  //       line-height: 3rem;
  //     }
  //   }
  // }

// Optionally show summary report in CSS and/or the command line:
// - If you use Mocha, reporting to the command line is automatic.
// - if you use true-cli, report(terminal) is required for output.
@include report;
