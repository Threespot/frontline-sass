////
/// @group Math
/// @author xi
/// @link https://github.com/xi/sass-planifolia/blob/master/sass/math.scss
/// @ignore Based on work by davidkpiano, strarsis, drtimofey
/// @ignore https://gist.github.com/davidkpiano/ad6e6771df050ff3727f
/// @ignore https://github.com/strarsis/sass-math-pow
/// @ignore https://github.com/thoughtbot/bitters/issues/167
/// @ignore https://github.com/thoughtbot/bourbon/issues/717
////

/// Pi
/// @type Number
$fs-pi: 3.141592653589793;

/// @access private
$Ï€: $fs-pi;

/// @access private
@function fs-exp-taylor($x, $steps) {
  $item: 1;
  $result: 1;

  @for $i from 1 to $steps {
    $item: $item * math.div($x, $i);
    $result: $result + $item;
  }

  @return $result;
}

/// @access private
@function fs-ln-taylor($x, $steps) {
  $z: math.div($x - 1, $x + 1);
  $power: $z;
  $result: $z;

  @for $i from 1 to $steps {
    $power: $power * $z * $z;
    $result: $result + math.div($power, (2 * $i + 1));
  }

  @return 2 * $result;
}

/// @access private
@function fs-pow-int($base, $exponent) {
  @if $exponent < 0 {
    @return math.div(1, fs-pow-int($base, -$exponent));
  }
  @else if $exponent == 0 {
    @return 1;
  }
  @else if $exponent == 1 {
    @return $base;
  }
  @else {
    $exp: floor($exponent * 0.5);
    $pow: fs-pow-int($base, $exp);

    @if $exp * 2 == $exponent {
      @return $pow * $pow;
    }
    @else {
      @return $pow * $pow * $base;
    }
  }
}

/// @access private
@function fs-log-approx($x) {
  @if $x <= 0 {
    @error 'ðŸ”´ Canâ€™t calculate log of #{$x}';
  }
  @else if $x >= 1 {
    // choose the smaller option (-1) because it yield better results in fs-ln()
    @return str-length(inspect(round($x))) - 1;
  }
  @else {
    @return -1 * str-length(inspect(round(math.div(1, $x))));
  }
}

/// @access private
/// @require {function} fs-ln-taylor
/// @require {function} fs-log-approx
/// @require {function} fs-pow-int
@function fs-ln($x, $steps: 32) {
  $ln10: 2.302585092994046;
  $approx: fs-log-approx($x);

  // $y is in range [1, 10]
  $y: math.div($x, fs-pow-int(10, $approx));

  @return $approx * $ln10 + fs-ln-taylor($y, $steps);
}

/// Power function (supports fractional exponents)
/// @param {Number} $x - Number
/// @param {Number} $exponent - Exponent
/// @param {Number} $steps [32] - Steps (level of precision)
/// @return {Number}
/// @require {function} fs-exp-taylor
/// @require {function} fs-ln
/// @require {function} fs-pow-int
/// @require {function} fs-strip-unit
@function fs-pow($x, $exponent, $steps: 32) {
  // We must strip the units and add them back at the end
  $units: math.div($x, fs-strip-unit($x));
  $x: fs-strip-unit($x);

  $exp1: round($exponent);
  $exp2: $exponent - $exp1;
  $pow1: fs-pow-int($x, $exp1);

  @if $exp2 == 0 {
    @return $pow1 * $units;
  }
  @else {
    $y: fs-ln($x, $steps) * $exp2;
    $pow2: fs-exp-taylor($y, $steps);

    @return $pow1 * $pow2 * $units;
  }
}

/// Square root function
/// @param {Number} $x - Number
/// @param {Number} $exponent - Exponent
/// @param {Number} $steps [40] - Steps (level of precision)
/// @return {Number}
/// @require {function} fs-pow
@function fs-sqrt($x, $exponent: 2, $steps: 40) {
  @return fs-pow($x, math.div(1, $exponent), $steps);
}

/// Factorial function
/// @param {Number} $number
/// @return {Number}
/// @author Daniel Perez Alvarez
/// @link https://unindented.org/articles/trigonometry-in-sass/
@function factorial($number) {
  // Return 1 for 0! or if $number is < 0
  $value: 1;

  @if $number > 0 {
    @for $i from 1 through $number {
      $value: $value * $i;
    }
  }

  @return $value;
}

/// @access private
@function fs-sin-taylor($x, $steps) {
  // We must strip the units and add them back at the end
  $units: math.div($x, fs-strip-unit($x));
  $x: fs-strip-unit($x);

  $item: $x;
  $result: $x;

  @for $i from 1 to $steps {
    $item: -$item * $x * math.div(math.div($x, (2 * $i)), (2 * $i + 1));
    $result: $result + $item;
  }

  @return $result * $units;
}

/// Sine function
/// @param {Number} $x - Number
/// @param {Number} $steps [32] - Steps (level of precision)
/// @return {Number}
/// @require {variable} $fs-pi
/// @require {function} fs-sin
/// @require {function} fs-sin-taylor
@function fs-sin($x, $steps: 32) {
  $y: $x % (2 * $Ï€);

  @if $y > $Ï€ {
    @return -1 * fs-sin($y - $Ï€);
  }
  @else if $y < 0 {
    @return -1 * fs-sin(-$y);
  }
  @else {
    @return fs-sin-taylor($y % (2 * $Ï€), $steps);
  }
}

/// Cosine function
/// @param {Number} $x - Number
/// @param {Number} $steps [32] - Steps (level of precision)
/// @return {Number}
/// @require {variable} $fs-pi
/// @require {function} fs-sin
@function fs-cos($x, $steps: 32) {
  @return fs-sin($x - $Ï€ * 0.5, $steps);
}

/// Tangent function
/// @param {Number} $x - Number
/// @param {Number} $steps [32] - Steps (level of precision)
/// @return {Number}
/// @require {function} fs-cos
/// @require {function} fs-sin
@function fs-tan($x, $steps: 32) {
  @return math.div(fs-sin($x, $steps), fs-cos($x, $steps));
}
