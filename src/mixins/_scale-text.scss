/// **‚ö†Ô∏è DEPRECATED:** use `fs-scale` instead.
/// Automatically scale font-size and line-height
/// @group Main
/// @require {mixin} fs-min-width - Min-width media query mixin
/// @param {Number | List} $start - Starting `font-size` and `line-height` (optional)
/// @param {Number | List} $end - Ending `font-size` and `line-height` (optional)
/// @param {Number} $font-increment [2px] - Font-size increment
/// @param {Number} $line-height-increment [0.1] - Line-height increment (optional)
/// @param {Number} $start-width [320px] - Starting viewport width
/// @param {Number} $end-width [1000px] - Ending viewport width
/// @param {Number} $context [$fs-base-font-size] - Base `font-size` (optional)
/// @param {String} $units ['%'] - `font-size` units (optional, defaults to `'%'`)
/// @require {function} fs-convert-units
/// @link https://github.com/bookcasey/fittext
///
/// @example scss
///   // Basic example
///   @include fs-scale-text(
///     $start: 32px,
///     $end: 50px,
///     $font-increment: 3px,
///     $start-width: 400px,
///     $end-width: 800px
///   );
///
///   // With line-height and custom units
///   @include fs-scale-text(
///     $start: 32px 1.25,
///     $end: 50px 1.1,
///     $font-increment: 3px,
///     $line-height-increment: 0.05,
///     $start-width: 400px,
///     $end-width: 800px,
///     $units: 'em'
///   );
///
@mixin fs-scale-text(
  $start,
  $end,
  $font-increment: 2px,
  $line-height-increment: 0.1,
  $start-width: 320px,
  $end-width: 1000px,
  $context: $fs-base-font-size,
  $units: '%'
) {

  // Add vars at top to avoid scope issues
  $start-font-size: $start;
  $end-font-size: $end;
  $has-line-height: false;
  $start-line-height: inherit;
  $end-line-height: inherit;
  $line-height-diff: $line-height-increment;
  $line-height-sign: 1;
  $line-height-steps: 0;

  @warn 'fs-scale-text() is deprecated, use fs-scale(font-size, (#{$start-width}: #{$start-font-size}, #{$end-width}: #{$end-font-size}))';

  // Check for line-height
  @if length($start) == 2 and length($end) == 2 {
    $has-line-height: true;
  }

  // Update vars if line-height was specified
  @if $has-line-height {
    // Save font-sizes
    $start-font-size: nth($start, 1);
    $end-font-size: nth($end, 1);

    // Save line-height values
    $start-line-height: nth($start, 2);
    $end-line-height: nth($end, 2);
    $line-height-diff: $end-line-height - $start-line-height;

    // If no change in line-height, ignore it
    @if fs-strip-unit($line-height-diff) == 0 {
      $has-line-height: false;
    }
    @else {
      // Determine if line-height increaes or decreses
      $line-height-sign: $line-height-diff / abs($line-height-diff);// returns 1 or -1
    }
  }

  // Validation
  //---------------------------------
  @if $end-font-size <= $start-font-size {
    @error 'üî¥  max font size must be greater than min font size for #{&}';
  }

  @if (unit($start-font-size) != 'px' or unit($end-font-size) != 'px') {
    @error 'üî¥  starting and ending font sizes must be in pixels for #{&}';
  }

  @if unit($font-increment) != 'px' {
    @error 'üî¥  font increment must be in pixels for #{&}';
  }

  @if unit($context) != 'px' {
    @error 'üî¥  font context size must be in pixels for #{&}';
  }

  @if type-of($start-width) == 'number' and type-of($end-width) == 'number' {
    @if $end-width <= $start-width {
      @error 'üî¥  ending width must be greater than starting width for #{&}';
    }
  }
  @else {
    @if type-of($start-width) != 'number' {
      @error 'üî¥  starting width must be a pixel value for #{&}';
    }

    @if type-of($end-width) != 'number' {
      @error 'üî¥  ending width must be a pixel value for #{&}';
    }
  }

  @if ($units != '%' and $units != 'em' and $units != 'rem' and $units != 'px') {
    @error 'üî¥  fs-scale-text() output units must be %, px, em, or rem  for #{&}';
  }

  // Output starting font-size for when fs-scale-text() used multiple times on the same element
  @include fs-min-width($start-width) {
    font-size: fs-convert-units($units, $start-font-size, $context);
    @if $has-line-height {
      line-height: $start-line-height;
    }
  }

  // Calculate how many times the font-size will need to be adjusted, rounded up to nearest whole number
  $font-size-steps: ceil(($end-font-size - $start-font-size) / $font-increment);

  // Warn if >10 breakpoints will be generated
  @if $fs-debug-mode and ($font-size-steps > 10) {
    @warn '‚ö†Ô∏è  #{$font-size-steps} breakpoints generated by fs-scale-text() for #{&}';
  }

  // Calculate the media query interval
  $font-size-mq-step: ($end-width - $start-width) / $font-size-steps;

  // Determine how many font steps equals one line-height step (e.g. increase line-height every nth font steps)
  @if $has-line-height {
    $line-height-steps: abs($font-size-steps / ($line-height-diff / $line-height-increment));
  }

  // If there are more line-height steps than font steps, adjust line-height increment so they are equal
  @if $line-height-steps < 1 {
    $line-height-increment: $line-height-increment / $line-height-steps;
    $line-height-steps: 1;
  }

  // Define vars here for scope reasons
  $line-height-index: 1;
  $line-height: $start-line-height;

  // @debug 'üî∑ ' + $font-size-steps + ' font steps, ' + ($font-size-steps / $line-height-steps) + ' line-height step(s)';

  // Generate the media queries
  @for $i from 1 through $font-size-steps {
    // Calculate current breakpoint width
    $breakpoint: round($start-width + ($i * $font-size-mq-step));

    // Calculate current font-size
    $font-size: $start-font-size + ($i * $font-increment);

    // Don‚Äôt exceed $end-width (could happen due to rounding)
    @if $breakpoint > $end-width {
      // @debug 'üî¥ $breakpoint: ' + $breakpoint + ' exceeds $end-width: ' + $end-width;
      $breakpoint: $end-width;
    }

    // Since we rounded up $font-size-steps, the last font step may need to be reduced to prevent exceeding the target font size
    @if $font-size > $end-font-size {
      // @debug 'üî¥ Reduce last $font-increment from ' + $font-increment + ' to ' + ($font-increment - ($font-size - $end-font-size));
      $font-size: $end-font-size;
    }

    // Output font size styles
    @include fs-min-width($breakpoint) {
      // fs-convert-units() will output the correct unit based on $units
      font-size: fs-convert-units($units, $font-size, $context);

      @if ($has-line-height and $line-height-diff != 0) {

        // Check if current font step is equal to a line-height step (e.g. increase line-height every nth font steps)
        // NOTE: For some reason, putting $i first (e.g. ‚Äú>=‚Äù) results in false positives when the values are equal ¬Ø\_(„ÉÑ)_/¬Ø
        @if ($line-height-steps * $line-height-index) <= $i {

          // Calculate the line height ($line-height-sign used to increase/decrease the starting value)
          $line-height: $start-line-height + ($line-height-sign * $line-height-index * $line-height-increment);
          line-height: $line-height;

          // Increment line-height counter
          $line-height-index: $line-height-index + 1;

          // Output whenever the line-height is updated
          // @debug 'üî∂ Step ' + $i + ': font-size ' + $font-size + ', line-height ' +  $line-height + ', index=' + $line-height-index;
        }
        // If the last iteration, just output the $end-line-height instead of calculating it since it might exceed the final value due to rounding above
        @else if ($i == $font-size-steps) {
          // @debug '‚ö™Ô∏è line-height set to ending value of ' + $end-line-height + ' instead of calculated value of ' + ($start-line-height + ($line-height-sign * $line-height-index * $line-height-increment));
          line-height: $end-line-height;
        }
        @else {
          // Output when the font-size is updated but not the line-height
          // @debug 'üî∑ Step ' + $i + ': font-size ' + $font-size + ', line-height ' +  $line-height + ', index=' + $line-height-index;
        }
      }
    }
  }
}
