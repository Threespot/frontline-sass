@charset 'UTF-8';

//      _______  ____  _  __________   _____  ______
//     / __/ _ \/ __ \/ |/ /_  __/ /  /  _/ |/ / __/
//    / _// , _/ /_/ /    / / / / /___/ //    / _/
//   /_/ /_/|_|\____/_/|_/ /_/ /____/___/_/|_/___/   v4.1.1
//
//   This project is licensed under the terms of the MIT license


@use "sass:map";
@use 'sass:math';

//------------------------------------------------------------------------//
// Global vars
//------------------------------------------------------------------------//

// Variables
//---------------------------------
/// Base font size
/// @group Main
/// @type Number
$fs-base-font-size: 16px !default;

/// Named breakpoints map
/// @group Main
/// @type Map
$fs-breakpoints: (
  'global': (
    'narrow' : 320px,
    'small'  : 480px,
    'medium' : 640px,
    'wide'   : 960px,
    'full'   : 1200px
  )
) !default;

/// Colors map
/// @group Main
/// @type Map
/// @link http://clrs.cc
$fs-colors: (
  'base': (
    'red': #ff4136,
    'orange': #ff851b,
    'yellow': #ffdc00,
    'green': #2ecc40,
    'blue': #0074d9,
    'purple': #b10dc9,
    'white': #fff,
    'gray': #ccc,
    'black': #000,
  )
) !default;

/// Custom easings map
/// @group Main
/// @type Map
/// @link https://github.com/jhardy/compass-ceaser-easing
/// @link http://easings.net
$fs-easings: (
  'linear'         : '0.250, 0.250, 0.750, 0.750',
  'ease'           : '0.250, 0.100, 0.250, 1.000',
  'ease-in'        : '0.420, 0.000, 1.000, 1.000',
  'ease-out'       : '0.000, 0.000, 0.580, 1.000',
  'ease-in-out'    : '0.420, 0.000, 0.580, 1.000',
  'easeInBack'     : '0.600, -0.280, 0.735, 0.045',
  'easeInCirc'     : '0.600, 0.040, 0.980, 0.335',
  'easeInCubic'    : '0.550, 0.055, 0.675, 0.190',
  'easeInExpo'     : '0.950, 0.050, 0.795, 0.035',
  'easeInQuad'     : '0.550, 0.085, 0.680, 0.530',
  'easeInQuart'    : '0.895, 0.030, 0.685, 0.220',
  'easeInQuint'    : '0.755, 0.050, 0.855, 0.060',
  'easeInSine'     : '0.470, 0.000, 0.745, 0.715',
  'easeInOutBack'  : '0.680, -0.550, 0.265, 1.55',
  'easeInOutCirc'  : '0.785, 0.135, 0.150, 0.860',
  'easeInOutCubic' : '0.645, 0.045, 0.355, 1.000',
  'easeInOutExpo'  : '1.000, 0.000, 0.000, 1.000',
  'easeInOutQuad'  : '0.455, 0.030, 0.515, 0.955',
  'easeInOutQuart' : '0.770, 0.000, 0.175, 1.000',
  'easeInOutQuint' : '0.860, 0.000, 0.070, 1.000',
  'easeInOutSine'  : '0.445, 0.050, 0.550, 0.950',
  'easeOutBack'    : '0.340, 1.560, 0.640, 1.000',
  'easeOutCirc'    : '0.075, 0.820, 0.165, 1.000',
  'easeOutCubic'   : '0.215, 0.610, 0.355, 1.000',
  'easeOutExpo'    : '0.190, 1.000, 0.220, 1.000',
  'easeOutQuad'    : '0.250, 0.460, 0.450, 0.940',
  'easeOutQuart'   : '0.165, 0.840, 0.440, 1.000',
  'easeOutQuint'   : '0.230, 1.000, 0.320, 1.000',
  'easeOutSine'    : '0.390, 0.575, 0.565, 1.000',
);

/// Characters to escape from SVGs
/// @group Main
/// @type Map
/// @ignore Symbol reference http://www.w3schools.com/tags/ref_urlencode.asp
/// @ignore Note: gulp-minify-css (which uses clean-css) isn‚Äôt applying config options correctly causing data URLs to not be wrapped in quote, so we have to convert double quotes (") to percent encoded symbols.
$fs-escape-chars: (
  '"': '\'',
  '%': '%25',
  '#': '%23',
  '<': '%3C',
  '>': '%3E',
);
// Only add additional characters if necessary
// (e.g. if SVG contains inline styles or CSS)
//-------------------------------------------
// '(': '%28',
// ')': '%29',
// '/': '%2F',
// ':': '%3A',
// ';': '%3B',
// '=': '%3D',
// '?': '%3F',
// '@': '%40',
// '\\': '%5C',
// '^': '%5E',
// '`': '%60',
// '{': '%7B',
// '|': '%7C',
// '}': '%7D',
// These shouldn‚Äôt be necessary, just here for reference
// ' ': '%20',
// '\'': '%22',
// '"': '%27',

/// **‚ö†Ô∏è DEPRECATED:** use `$fs-svgs` instead.
/// SVG icon map for deprecated `fs-svg()` mixin
/// @group Main
/// @type Map
$fs-svg-icons: (
  close: (
    height: 28,
    width: 22,
    data: '<path d="M20.28 20.66q0 .62-.44 1.06l-2.12 2.12q-.44.44-1.06.44t-1.07-.44l-4.6-4.6-4.6 4.6q-.43.44-1.06.44t-1.06-.44l-2.12-2.12q-.44-.44-.44-1.06t.44-1.07l4.6-4.6-4.6-4.6q-.44-.43-.44-1.06t.44-1.06l2.12-2.12q.44-.44 1.06-.44t1.07.44l4.6 4.6 4.6-4.6q.43-.44 1.06-.44t1.06.44l2.12 2.12q.44.44.44 1.06t-.44 1.07l-4.6 4.6 4.6 4.6q.44.43.44 1.06z"/>'
  ),
  search: (
    height: 28,
    width: 26,
    data: '<path d="M18 13q0-2.9-2.06-4.95T11 6 6.05 8.06 4 13t2.05 4.95T11 20t4.95-2.06T18 13zm8 13q0 .8-.6 1.4T24 28q-.84 0-1.4-.6l-5.37-5.34Q14.43 24 11 24q-2.23 0-4.27-.87T3.2 20.8.88 17.26 0 13t.87-4.27T3.2 5.2t3.53-2.33T11 2t4.27.87T18.8 5.2t2.33 3.53T22 13q0 3.44-1.94 6.23l5.36 5.36q.58.57.58 1.4z"/>'
  )
) !default;

/// SVG icons
/// @group Main
/// @type Map
$fs-svgs: (
  'chevDown': '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 14 10" preserveAspectRatio="xMidYMid meet"><path d="M12 0l2 2-7 7.1-7-7L2-.1l5 5z"/></svg>'
);

/// Z-index layer map
/// @group Main
/// @type Map
$fs-zindex: (
  'main': 100,
  'tooltip': 200,
  'nav': 300,
  'modal': 9999,
) !default;


// Functions
//---------------------------------
/// Check whether `$list` contains `$value`.
/// @group Sass Utils
/// @param {List} $list - List of values.
/// @param {*} $value - Value to check in the list.
/// @return {Boolean}
/// @link http://www.sitepoint.com/bulletproof-function-validate-length-values-sass/
@function fs-contains($list, $value) {
  @return not not index($list, $value);
}

/// Convert unit to px, em, rem, or %
/// @access private
/// @param {Number} $units- Units to convert to
/// @param {Number} $value - Starting px value
/// @return {Number} $context - Context font-size in px
/// @require {function} fs-em
/// @require {function} fs-rem
@function fs-convert-units($units, $value, $context: $fs-base-font-size) {
  @if unit($value) != 'px' or unit($context) != 'px' {
    @error 'üî¥  fs-convert-units() only accepts pixel values';
  }

  // Percentage
  @if $units == '%' {
    @if unit($value) == '%' {
      @return $value;
    }
    @else {
      @return percentage(math.div($value, $context));
    }
  }

  // Pixels
  @else if $units == 'px' {
    @return $value;
  }

  // Ems
  @else if $units == 'em' {
    @return fs-em($value, $context);
  }

  // Rems
  @else if $units == 'rem' {
    @return fs-rem($value);
  }

  // Unsupported output unit
  @else {
    @error 'üî¥  ‚Äú#{$units}‚Äù is not a valid output unit for fs-convert-units()';
  }
}

/// Custom easing function
/// @group Main
/// @param {String} $name - Name of easing
/// @return {String} - Easing code
/// @require {variable} $fs-easings - Custom easing map
@function fs-easing($name) {
  @return cubic-bezier(unquote(map-get($fs-easings, $name)));
}

/// Convert px to em
/// @group Main
/// @param {Number | Map} $values - Value or values to convert
/// @param {Number} $context [$fs-base-font-size] - Base font size
/// @return {*} - Converted value or list of values
/// @require {variable} $fs-base-font-size - Base font size
@function fs-em($values, $context: $fs-base-font-size) {
  // Ensure context size is in pixels
  @if unit($context) != 'px' {
    @error 'üî¥  #{$context} size must be in pixels';
  }

  // Placeholder list for converted values
  $output: ();

  @each $val in $values {
    // Check if pixel value
    @if type-of($val) == 'number' and unit($val) == 'px' {
      // Convert to ems
      $val: math.div($val, $context) * 1em;
    }

    // Do nothing to all other values
    @else if $fs-debug-mode {
      @warn '‚ö†Ô∏è  Can‚Äôt convert non-pixel value to ems: #{$val}';
    }

    // Append value to output list
    $output: append($output, $val);
  }

  // Return converted value(s)
  @return $output;
}

////
/// @group Sass Utils
/// @author Hugo Giraudel
/// @link http://www.sitepoint.com/extra-map-functions-sass/
////

/// Fetch nested keys
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Keys to fetch
/// @return {*}
@function fs-map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }

  @return $map;
}

/// Update a key deeply nested
/// @author Hugo Giraudel
/// @param {Map} $map - Map to update
/// @param {Arglist} $keys - Keys to access to value to update
/// @param {*} $value - New value (last member of `$keys`)
/// @return {Map} - Updated map
@function fs-map-deep-set($map, $keys.../*, $value */) {
  $map-list: ($map,);
  $result: null;

  @if length($keys) == 2 {
    @return map-merge($map, (nth($keys, 1): nth($keys, -1)));
  }

  @for $i from 1 through length($keys) - 2 {
    $map-list: append($map-list, map-get(nth($map-list, -1), nth($keys, $i)));
  }

  @for $i from length($map-list) through 1 {
    $result: map-merge(nth($map-list, $i), (nth($keys, $i): if($i == length($map-list), nth($keys, -1), $result)));
  }

  @return $result;
}

/// Compute the maximum depth of a map
/// @param {Map} $map
/// @return {Number} max depth of `$map`
@function fs-map-depth($map) {
  $level: 1;

  @each $key, $value in $map {
    @if type-of($value) == 'map' {
      $level: max(fs-map-depth($value) + 1, $level);
    }
  }

  @return $level;
}

/// Test if map got all `$keys` at first level
/// @author Hugo Giraudel
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Keys to test
/// @return {Boolean}
@function fs-map-has-keys($map, $keys...) {
  @each $key in $keys {
    @if not map-has-key($map, $key) {
      @return false;
    }
  }

  @return true;
}

/// Test if map got all `$keys` nested with each others
/// @author Hugo Giraudel
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Keys to test
/// @return {Boolean}
@function fs-map-has-nested-keys($map, $keys...) {
  @each $key in $keys {
    @if not map-has-key($map, $key) {
      @return false;
    }
    $map: map-get($map, $key);
  }

  @return true;
}

/// An equivalent of `zip` function but for maps.
/// Takes two lists, the first for keys, second for values.
/// @param {List} $keys - Keys for map
/// @param {List} $values - Values for map
/// @return {Map} Freshly created map
/// @link http://sass-lang.com/documentation/Sass/Script/Functions.html#zip-instance_method
@function fs-map-zip($keys, $values) {
  $l-keys: length($keys);
  $l-values: length($values);
  $min: min($l-keys, $l-values);
  $map: ();

  @if $l-keys != $l-values {
    @warn '‚ö†Ô∏è  There are #{$l-keys} key(s) for #{$l-values} value(s) in the map for `map-zip`. ' + 'Resulting map will only have #{$min} pairs.';
  }

  @if $min == 0 {
    @return $map;
  }

  @for $i from 1 through $min {
    $map: map-merge($map, (nth($keys, $i): nth($values, $i)));
  }

  @return $map;
}

/// jQuery-style extend function
/// About `map-merge()`:
/// * only takes 2 arguments
/// * is not recursive
/// @param {Map} $map - first map
/// @param {ArgList} $maps - other maps
/// @param {Boolean} $deep - recursive mode
/// @return {Map}
@function fs-map-extend($map, $maps.../*, $deep */) {
  $last: nth($maps, -1);
  $deep: $last == true;
  $max: if($deep, length($maps) - 1, length($maps));

  // Loop through all maps in $maps...
  @for $i from 1 through $max {
    // Store current map
    $current: nth($maps, $i);

    // If not in deep mode, simply merge current map with map
    @if not $deep {
      $map: map-merge($map, $current);
    }
    @else {
      // If in deep mode, loop through all tuples in current map
      @each $key, $value in $current {

        // If value is a nested map and same key from map is a nested map as well
        @if type-of($value) == 'map' and type-of(map-get($map, $key)) == 'map' {
          // Recursive extend
          $value: fs-map-extend(map-get($map, $key), $value, true);
        }

        // Merge current tuple with map
        $map: map-merge($map, ($key: $value));
      }
    }
  }

  @return $map;
}

/// Convert px to rem
/// @group Main
/// @param {Number | Map} $values - Value values to convert
/// @param {Number} $context [$fs-base-font-size] - Base font size
/// @return {*} - Converted value or list of values
/// @require {variable} $fs-base-font-size - Base font size
@function fs-rem($values) {
  // Placeholder list for converted values
  $output: ();

  @each $val in $values {

    // Check if pixel value
    @if type-of($val) == 'number' and unit($val) == 'px' {
      // Convert to rems
      $val: math.div($val, $fs-base-font-size) * 1rem;
    }

    // Do nothing to all other values
    @else if $fs-debug-mode and $val != 0 {
      @warn '‚ö†Ô∏è  Can‚Äôt convert non-pixel value to rems: #{$val}';
    }

    // Append value to output list
    $output: append($output, $val);
  }

  // Return converted value(s)
  @return $output;
}

/// Scale a value relative to the viewport width using `calc()` and viewport units
/// @group Main
/// @param {Number} $start - Starting value
/// @param {Number} $end - Ending value
/// @param {Number} $min-width - Starting viewport width
/// @param {Number} $max-width - Ending viewport width
/// @return {String} - Custom `calc()` formula
/// @ignore Demo https://www.sassmeister.com/gist/9f87f8c19e91c811831d84fc8484ed24
/// @link http://www.sassmeister.com/gist/7f22e44ace49b5124eec
/// @link http://madebymike.com.au/writing/precise-control-responsive-typography/
/// @link https://zellwk.com/blog/viewport-based-typography/
/// @link http://codepen.io/indrekpaas/pen/VarLaJ?editors=1100
/// @link http://codepen.io/maranomynet/pen/ozNpXV?editors=1100
/// @link https://www.smashingmagazine.com/2016/05/fluid-typography/
/// @example scss
///   p {
///     font-size: fs-scale(20px, 30px, 320px, 400px);
///   }
@function fs-scale($start, $end, $min-width, $max-width, $units: 'rem') {
  @if $start > 0 and $end > 0 and unit($start) != unit($end) {
    @error 'üî¥  fs-scale() units don‚Äôt match';
  }

  $slope: math.div($end - $start, $max-width - $min-width);

  $intercept: $end - ($slope * $max-width);

  @if (fs-strip-unit($intercept) == 0) {
    @return $slope * 100vw;
  }
  @else {
    @if $units == 'em' {
      @if $slope == 0 {
        @return fs-em($intercept);
      }
      @else {
        @return calc(#{$slope * 100vw} + #{fs-em($intercept)});
      }
    }
    @else {
      @if $slope == 0 {
        @return fs-em($intercept);
      }
      @else {
        @return calc(#{$slope * 100vw} + #{fs-rem($intercept)});
      }
    }
  }
}

/// Generate clamp() to smoothly scale a value between two breakpoints
/// @group Main
/// @param {Map} $map - Map of breakpoints and values
/// @param {String} $units [vw] - Optionally specify container query units
/// @return {String} - Custom `clamp()` formula
/// @require {function} fs-rem
/// @link https://chrisburnell.com/clamp-calculator/
///
/// @example scss
///   p {
///     font-size: scale-clamp((375px: 16px, 960px: 20px));
///   }
///
@function fs-scale-clamp($map, $units: vw) {
  // Formulas from link above:
  //
  //   Change = (sizeMax - sizeMin) / (viewportMax - viewportMin);
  //   A = sizeMax - viewportMax * Change;
  //   B = 100vw * Change;
  //   Result = clamp(sizeMin, A + B, sizeMax);
  //
  $breakpoints: map.keys($map);
  $values: map.values($map);
  $min-width: nth($breakpoints, 1);
  $max-width: nth($breakpoints, 2);
  $start: nth($values, 1);
  $end: nth($values, 2);
  $change: math.div($end - $start, $max-width - $min-width);
  $a: $end - ($max-width * $change);

  // Add support for container query units
  // https://caniuse.com/css-container-query-units
  $width: 100vw;
  @if $units == 'cqw' {
    $width: 100cqw;
  } @else if $units == 'cqh' {
    $width: 100cqh;
  } @else if $units == 'cqi' {
    $width: 100cqi;
  } @else if $units == 'cqb' {
    $width: 100cqb;
  }

  $b: $width * $change;

  // Round to 3 decimal places
  // Note: Additional decimal places won‚Äôt have any effect on the computed
  //       value and makes it harder to read in the dev tools.
  $a: math.div(math.round($a * 1000), 1000);
  $b: math.div(math.round($b * 1000), 1000);

  @return clamp(#{fs-rem($start)}, #{fs-rem($a)} + #{$b}, #{fs-rem($end)});
}

/// Slices `$list` between `$start` and `$end`.
/// @group Sass Utils
/// @author Hugo Giraudel
/// @link http://sassylists.com/documentation.html#fs-slice
///
/// @param {List}   $list                  - list to slice
/// @param {Number} $start (1)             - start index
/// @param {Number} $end   (length($list)) - end index
///
/// @return {List | Null}
///
/// @throws List indexes $start and $end must be numbers for `fs-slice`.
/// @throws Start index has to be lesser than or equals to the end index for `fs-slice`.
/// @throws List indexes must be non-zero integers for `fs-slice`.
/// @throws Start index has to be lesser than or equal to list length for `fs-slice`.
/// @throws End index has to be lesser than or equal to list length for `fs-slice`.
///
/// @example
/// fs-slice(a b c d e, 2, 4)
/// // b c d
///
/// @example
/// fs-slice(a b c d e, 2, 2)
/// // b
///
/// @example
/// fs-slice(a b c d e, 4, 2)
/// // null
///
/// @example
/// fs-slice(a b c d e, -1, 6)
/// // null
///
@function fs-slice($list, $start: 1, $end: length($list)) {
  @if type-of($start) != 'number' or type-of($end) != 'number' {
    @warn 'List indexes #{$start} and #{$end} must be numbers for `fs-slice`.';
    @return null;
  }

  @if $start > $end {
    @warn 'Start index is #{$start} but has to be lesser than or equals to the end index (#{$end}) for `fs-slice`.';
    @return null;
  }

  @if $start < 1 or $end < 1 {
    @warn 'List indexes must be non-zero integers for `fs-slice`.';
    @return null;
  }

  @if $start > length($list) {
    @warn 'Start index is #{$start} but list is only #{length($list)} items long for `fs-slice`.';
    @return null;
  }

  @if $end > length($list) {
    @warn 'End index is #{$end} but list is only #{length($list)} items long for `fs-slice`.';
    @return null;
  }

  $result: ();

  @for $i from $start through $end {
    $result: append($result, nth($list, $i), list-separator($list));
  }

  @return $result;
}

/// Replace `$search` with `$replace` in `$string`
/// @group Sass Utils
/// @author Hugo Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
/// @link http://sassmeister.com/gist/1b4f2da5527830088e4d
/// @link http://hugogiraudel.com/2014/01/13/sass-string-replacement-function/
///
/// @example scss
///   fs-str-replace("abcde", "bc", "a") => "aade"
///
@function fs-str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + fs-str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

/// Add `$unit` to `$value`
/// @group Sass Utils
/// @author Hugo Giraudel
/// @link http://hugogiraudel.com/2014/01/15/sass-string-to-number/
/// @param {Number} $value - Value to add unit to
/// @param {String} $unit - String representation of the unit
/// @return {Number} - `$value` expressed in `$unit`
@function fs-to-length($value, $unit) {
  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);

  @if not index(map-keys($units), $unit) {
    @warn('Invalid unit for ‚Äúfs-to-length:(#{$value}, #{$unit})‚Äù');
  }

  @return $value * map-get($units, $unit);
}


/// Casts a string into a number
/// @group Sass Utils
/// @param {String | Number} $value - Value to be parsed
/// @return {Number}
/// @author Hugo Giraudel
/// @link http://hugogiraudel.com/2014/01/15/sass-string-to-number/
@function fs-to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  }
  @else if type-of($value) != 'string' {
    @warn('Value must be a number or string: ‚Äúfs-to-number(#{$value})‚Äù');
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i));
    }

    @if $character == '.' {
      $digits: 1;
    }
    @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    }
    @else {
      $digits: $digits * 10;
      $result: $result + math.div(map-get($numbers, $character), $digits);
    }
  }

  @return if($minus, -$result, $result);
}

/// Strip units
/// @group Sass Utils
/// @param {Number} $arg - Value to strip
/// @return {Number} - Stripped value
/// @link http://stackoverflow.com/a/12335841/673457
@function fs-strip-unit($arg) {
  // Return unitless value if valid number
  @if type-of($arg) == 'number' {
    @return math.div($arg, ($arg * 0 + 1));
  }
  // Error if not a valid number
  @else {
    @error 'üî¥  fs-strip-unit(#{inspect($arg)} is not a valid number';
  }
}


// Functions with dependencies
/// Helper to get named breakpoint value from `$fs-breakpoints` map. Defaults to using 'base' as key if a single argument is passed.
/// @group Main
/// @param {Arglist} $keys - key/value
/// @return {Number} - Breakpoint width
/// @require {function} fs-map-deep-get - Fetch nested keys
/// @require {variable} $fs-breakpoints - Named breakpoints map
@function fs-breakpoint($keys...) {
  @if not global-variable-exists(fs-breakpoints) {
    @error 'üî¥  $fs-breakpoints map does not exist';
  }

  @if not length($fs-breakpoints) {
    @error 'üî¥  $fs-breakpoints map does not contain any items';
  }

  $default-key: 'global';

  // If a single value was passed, use the default key
  @if length($keys) == 1 and type-of(map-get($fs-breakpoints, $default-key)) != 'null' {
    $keys: join($default-key, $keys, comma);
  }

  $val: fs-map-deep-get($fs-breakpoints, $keys...);

  // Validate value
  @if type-of($val) != 'null' {
    @return $val;
  }
  @else {
    @error 'üî¥  ‚Äú#{$keys}‚Äù breakpoint not found';
  }
}
// Requires ‚Äúmap-functions‚Äù
/// Helper to get color value from `$fs-colors` map
/// @group Main
/// @param {Arglist} $keys - key/value
/// @return {Color} - Color value
/// @require {function} fs-map-deep-get - Fetch nested keys
/// @require {variable} $fs-colors - Named colors map
@function fs-color($keys...) {
  @if not global-variable-exists(fs-colors) {
    @error 'üî¥  $fs-colors map does not exist';
  }

  @if not length($fs-colors) {
    @error 'üî¥  Color map does not contain any items';
  }

  $default-key: 'base';

  // If a single value was passed, use the default key
  @if length($keys) == 1 and type-of(map-get($fs-colors, $default-key)) != 'null' {
    $keys: join($default-key, $keys, comma);
  }

  $val: fs-map-deep-get($fs-colors, $keys...);

  // Validate
  @if type-of($val) != 'color' {
    @error 'üî¥  #{$keys} is not a valid color';
  }

  @return $val;
}
// Requires ‚Äúmap-functions‚Äù
/// Check whether `$value` is a valid length.
/// @group Sass Utils
/// @param {*} $value - Value to validate.
/// @return {Boolean}
/// @link http://www.sitepoint.com/bulletproof-function-validate-length-values-sass/
/// @require {function} fs-contains
@function fs-is-length($value) {
  @return fs-contains(0 'auto' 'initial' 'inherit', $value) or type-of($value) == 'number' and not unitless($value) or str-slice($value + '', 1, 4) == 'calc';
}
// Requires ‚Äúcontains‚Äù
////
/// @group Math
/// @author xi
/// @link https://github.com/xi/sass-planifolia/blob/master/sass/math.scss
/// @ignore Based on work by davidkpiano, strarsis, drtimofey
/// @ignore https://gist.github.com/davidkpiano/ad6e6771df050ff3727f
/// @ignore https://github.com/strarsis/sass-math-pow
/// @ignore https://github.com/thoughtbot/bitters/issues/167
/// @ignore https://github.com/thoughtbot/bourbon/issues/717
////

/// Pi
/// @type Number
$fs-pi: 3.141592653589793;

/// @access private
$œÄ: $fs-pi;

/// @access private
@function fs-exp-taylor($x, $steps) {
  $item: 1;
  $result: 1;

  @for $i from 1 to $steps {
    $item: $item * math.div($x, $i);
    $result: $result + $item;
  }

  @return $result;
}

/// @access private
@function fs-ln-taylor($x, $steps) {
  $z: math.div($x - 1, $x + 1);
  $power: $z;
  $result: $z;

  @for $i from 1 to $steps {
    $power: $power * $z * $z;
    $result: $result + math.div($power, (2 * $i + 1));
  }

  @return 2 * $result;
}

/// @access private
@function fs-pow-int($base, $exponent) {
  @if $exponent < 0 {
    @return math.div(1, fs-pow-int($base, -$exponent));
  }
  @else if $exponent == 0 {
    @return 1;
  }
  @else if $exponent == 1 {
    @return $base;
  }
  @else {
    $exp: floor($exponent * 0.5);
    $pow: fs-pow-int($base, $exp);

    @if $exp * 2 == $exponent {
      @return $pow * $pow;
    }
    @else {
      @return $pow * $pow * $base;
    }
  }
}

/// @access private
@function fs-log-approx($x) {
  @if $x <= 0 {
    @error 'üî¥ Can‚Äôt calculate log of #{$x}';
  }
  @else if $x >= 1 {
    // choose the smaller option (-1) because it yield better results in fs-ln()
    @return str-length(inspect(round($x))) - 1;
  }
  @else {
    @return -1 * str-length(inspect(round(math.div(1, $x))));
  }
}

/// @access private
/// @require {function} fs-ln-taylor
/// @require {function} fs-log-approx
/// @require {function} fs-pow-int
@function fs-ln($x, $steps: 32) {
  $ln10: 2.302585092994046;
  $approx: fs-log-approx($x);

  // $y is in range [1, 10]
  $y: math.div($x, fs-pow-int(10, $approx));

  @return $approx * $ln10 + fs-ln-taylor($y, $steps);
}

/// Power function (supports fractional exponents)
/// @param {Number} $x - Number
/// @param {Number} $exponent - Exponent
/// @param {Number} $steps [32] - Steps (level of precision)
/// @return {Number}
/// @require {function} fs-exp-taylor
/// @require {function} fs-ln
/// @require {function} fs-pow-int
/// @require {function} fs-strip-unit
@function fs-pow($x, $exponent, $steps: 32) {
  // We must strip the units and add them back at the end
  $units: math.div($x, fs-strip-unit($x));
  $x: fs-strip-unit($x);

  $exp1: round($exponent);
  $exp2: $exponent - $exp1;
  $pow1: fs-pow-int($x, $exp1);

  @if $exp2 == 0 {
    @return $pow1 * $units;
  }
  @else {
    $y: fs-ln($x, $steps) * $exp2;
    $pow2: fs-exp-taylor($y, $steps);

    @return $pow1 * $pow2 * $units;
  }
}

/// Square root function
/// @param {Number} $x - Number
/// @param {Number} $exponent - Exponent
/// @param {Number} $steps [40] - Steps (level of precision)
/// @return {Number}
/// @require {function} fs-pow
@function fs-sqrt($x, $exponent: 2, $steps: 40) {
  @return fs-pow($x, math.div(1, $exponent), $steps);
}

/// Factorial function
/// @param {Number} $number
/// @return {Number}
/// @author Daniel Perez Alvarez
/// @link https://unindented.org/articles/trigonometry-in-sass/
@function factorial($number) {
  // Return 1 for 0! or if $number is < 0
  $value: 1;

  @if $number > 0 {
    @for $i from 1 through $number {
      $value: $value * $i;
    }
  }

  @return $value;
}

/// @access private
@function fs-sin-taylor($x, $steps) {
  // We must strip the units and add them back at the end
  $units: math.div($x, fs-strip-unit($x));
  $x: fs-strip-unit($x);

  $item: $x;
  $result: $x;

  @for $i from 1 to $steps {
    $item: -$item * $x * math.div(math.div($x, (2 * $i)), (2 * $i + 1));
    $result: $result + $item;
  }

  @return $result * $units;
}

/// Sine function
/// @param {Number} $x - Number
/// @param {Number} $steps [32] - Steps (level of precision)
/// @return {Number}
/// @require {variable} $fs-pi
/// @require {function} fs-sin
/// @require {function} fs-sin-taylor
@function fs-sin($x, $steps: 32) {
  $y: $x % (2 * $œÄ);

  @if $y > $œÄ {
    @return -1 * fs-sin($y - $œÄ);
  }
  @else if $y < 0 {
    @return -1 * fs-sin(-$y);
  }
  @else {
    @return fs-sin-taylor($y % (2 * $œÄ), $steps);
  }
}

/// Cosine function
/// @param {Number} $x - Number
/// @param {Number} $steps [32] - Steps (level of precision)
/// @return {Number}
/// @require {variable} $fs-pi
/// @require {function} fs-sin
@function fs-cos($x, $steps: 32) {
  @return fs-sin($x - $œÄ * 0.5, $steps);
}

/// Tangent function
/// @param {Number} $x - Number
/// @param {Number} $steps [32] - Steps (level of precision)
/// @return {Number}
/// @require {function} fs-cos
/// @require {function} fs-sin
@function fs-tan($x, $steps: 32) {
  @return math.div(fs-sin($x, $steps), fs-cos($x, $steps));
}
// Requires ‚Äústrip-unit‚Äù
/// Return unitless ratio of two values
/// @group Math
/// @param {Number} $a - Dividend
/// @param {Number} $b - Divisor
/// @return {Number} - Unitless ratio
/// @require {function} fs-strip-unit
@function fs-ratio($a, $b) {
  // Check if units match, or if divisor is unitless
  @if unit($a) == unit($b) or unitless($b) {
    @return fs-strip-unit(math.div($a, $b));
  }
  // Warn if units don't match
  @else {
    @error 'üî¥  Units do not match: fs-ratio(#{$a}, #{$b})';
  }
}
// Requires ‚Äústrip-unit‚Äù
/// **‚ö†Ô∏è DEPRECATED:** use `fs-strip-unit` instead.
/// Strips unit from value
/// @group Sass Utils
/// @param {Number} $arg - Value to strip
/// @return {Number} - Stripped value
/// @require {function} fs-strip-unit
@function fs-strip($arg) {
  @warn 'fs-strip() is deprecated, use fs-strip-unit(#{$arg}) instead';
  @return fs-strip-unit($arg);
}
// Requires ‚Äústrip-unit‚Äù
/// URL-encode string
/// @group Sass Utils
/// @param {String} $string - String to encode
/// @return {String} - URL-encoded string
/// @require {variable} $fs-escape-chars
/// @require {function} fs-str-replace
///
@function fs-url-encode($string) {
  @each $char, $code in $fs-escape-chars {
    $string: fs-str-replace($string, $char, $code);
  }
  @return $string;
}
// Requires ‚Äústr-replace‚Äù
/// Get z-index layer from `$fs-zindex` map variable
/// @group Main
/// @param {Arglist} $keys - key/value
/// @return {Number} - z-index value
/// @require {function} fs-map-deep-get - Fetch nested keys
/// @require {variable} $fs-zindex - Global z-index map
/// @link https://twitter.com/HugoGiraudel/status/480022470431608832
/// @link http://www.sitepoint.com/better-solution-managing-z-index-sass/
@function fs-zindex($keys...) {
  @if not global-variable-exists(fs-zindex) {
    @error 'üî¥  $fs-zindex map does not exist';
  }

  @if not length($fs-zindex) {
    @error 'üî¥  $fs-zindex map does not contain any items';
  }

  @return fs-map-deep-get($fs-zindex, $keys...);
}
// Requires ‚Äúmap-functions‚Äù

// Functions with nested dependencies
////
/// @group Main
/// @author Based on work by voxpelli and xi
/// @link https://gist.github.com/voxpelli/6304812
/// @link https://github.com/xi/sass-planifolia/blob/master/sass/contrast.scss
////

/// Color luminance function
/// @access private
/// @param {Color} $color - Color
/// @return {Number} - Float between 0‚Äì1
/// @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
/// @require {function} fs-pow
@function fs-luminance($color) {
  $colors: (
    'red': red($color),
    'green': green($color),
    'blue': blue($color)
  );

  @each $name, $value in $colors {
    $adjusted: 0;
    $value: math.div($value, 255);

    @if $value < 0.03928 {
      $value: math.div($value, 12.92);
    }
    @else {
      $value: math.div(($value + 0.055), 1.055);
      $value: fs-pow($value, 2.4);
    }

    $colors: map-merge($colors, ($name: $value));
  }

  @return (map-get($colors, 'red') * 0.2126) + (map-get($colors, 'green') * 0.7152) + (map-get($colors, 'blue') * 0.0722);
}

/// Color contrast function
/// @access private
/// @param {Color} $color1
/// @param {Color} $color2
/// @return {Number}
/// @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
/// @require {function} fs-luminance
@function fs-color-contrast($color1, $color2) {
  $lum1: fs-luminance($color1) + 0.05;
  $lum2: fs-luminance($color2) + 0.05;
  $ratio: math.div($lum1, $lum2);

  @if $lum2 > $lum1 {
    $ratio: math.div(1, $ratio);
  }

  @return $ratio;
}

/// Pick first color in map with passing color contrast ratio
/// @param {Color} $base - Background color
/// @param {Map} $colors - List of text colors ordered by preference
/// @param {Number} $ratio [4.5] - Target contrast ratio
/// @param {Number} $tolerance [0] - Allowed deviation from target contrast ratio
/// @return {Color}
/// @require {function} fs-color-contrast
///
/// @example scss
///   .demo {
///     color: fs-auto-contrast(darkgreen, (#fff, #555, #000));
///   }
///
@function fs-auto-contrast($base, $colors, $ratio: 4.5, $tolerance: 0) {
  $first-match: false;

  @for $i from 1 through length($colors) {
    $color: nth($colors, $i);
    $contrast: fs-color-contrast($base, $color);

    @if ($contrast >= ($ratio - $tolerance)) {

      @if not $first-match {
        $first-match: $color;

        // Warn if low contrast
        @if ($contrast < $ratio) {
          @warn "#{$first-match} on #{$base} fails WCAG AA contrast test (#{$contrast})";
        }
      }
    }
  }

  @if $first-match {
    @return $first-match;
  }
  @else {
    $last-color: nth($colors, length($colors));
    @warn "‚ö†Ô∏è  All text colors on #{$base} fail the WCAG AA contrast test at #{$ratio} ratio";
  }
}
// Requires pow() from ‚Äúmath‚Äù
/// **‚ö†Ô∏è DEPRECATED:** use `fs-svg-url` instead.
/// Helper to get URL-escaped inline SVG code for use with `background-image`
/// @group Main
/// @param {String} $name - Icon name
/// @return {Color} $color - Fill color
/// @require {function} fs-url-encode
/// @require {variable} $fs-svg-icons - SVG icon map
///
/// @ignore - SVG code must be escaped for older browsers (e.g. IE9)
/// @ignore - Some versions of Firefox don't like the ‚Äú#‚Äù symbol, must be also be escaped
/// @ignore - IE9+ requires height/width attributes or else background-size won't work
///
/// @link https://codepen.io/tigt/post/optimizing-svgs-in-data-uris
/// @link https://css-tricks.com/probably-dont-base64-svg/
/// @link http://stackoverflow.com/questions/21840551/background-size-with-svg-squished-in-ie9-10
/// @link http://caniuse.com/#feat=datauri
///
@function fs-svg($name, $color: false, $other: false) {
  @warn 'fs-svg() is deprecated, use fs-svg-url(#{$name}, (fill: #{$color})) instead';

  // Check if icon exists
  @if not map-has-key($fs-svg-icons, $name) {
    @error 'üî¥  icon ‚Äú#{$name}‚Äù does not exists in $fs-svg-icons map';
    @return false;
  }

  // Get icon data
  $icon-map: map-get($fs-svg-icons, $name);
  $data: map-get($icon-map, 'data');
  $height: map-get($icon-map, 'height');
  $width: map-get($icon-map, 'width');
  $other: map-get($icon-map, 'other');

  // Fill
  $fill: '';
  @if ($color) {
    $fill: ' fill="#{$color}"';
  }

  // Other attributes
  $custom-attrs: '';
  @if ($other) {
    $custom-attrs: ' #{$other}';
  }

  // Return inline SVG data
  @return 'data:image/svg+xml,' + fs-url-encode('<svg version="1.1" baseProfile="full" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ' + $width + ' ' + $height + '" width="' + $width + '" height="' + $height + '" preserveAspectRatio="xMidYMid meet"' + $fill + $custom-attrs + '>' + unquote($data) + '</svg>');
}
// Requires ‚Äúfs-url-encode‚Äù
/// Inline SVG in url() for background-image
/// @group Main
/// @param {String} $name - SVG name
/// @param {Map} $props - SVG attributes
/// @return {String} - Inline SVG as url("data:image/svg+xml,‚Ä¶")
/// @require {variable} $fs-escape-chars
/// @require {variable} $fs-svgs
/// @require {function} fs-str-replace
/// @require {function} fs-url-encode
/// @link https://www.sassmeister.com/gist/c2f12e64b242469d728f335ed612ae35
/// @link https://css-tricks.com/probably-dont-base64-svg/
/// @link https://codepen.io/tigt/post/optimizing-svgs-in-data-uris
/// @link https://codepen.io/jakob-e/pen/doMoML
/// @link https://yoksel.github.io/url-encoder/
/// @link https://www.sassmeister.com/gist/594de57bc18015df9dc568e96aff9075
/// @example scss
///   .foo {
///     background-image: fs-svg-url('chevDown', (fill: none, stroke: red, stroke-width: 1px));
///   }
@function fs-svg-url($name, $props: false, $svg-map: $fs-svgs) {
  @if not $svg-map {
    @error 'üî¥  $svg-map doesn‚Äôt exist';
    @return false;
  }

  @if not type-of($svg-map) == 'map' {
    @error 'üî¥  $svg-map isn‚Äôt a valid Sass map';
    @return false;
  }

  @if not map-has-key($svg-map, $name) {
    @error 'üî¥  icon ‚Äú#{$name}‚Äù not found in $svg-map';
    @return false;
  }

  $svg: map-get($svg-map, $name);

  // Add custom properties
  @if $props {
    $props-string: '';
    @each $key, $val in $props {
      $props-string: $props-string + " #{$key}='#{$val}'";
    }
    $svg: fs-str-replace($svg, '<svg', '<svg' + $props-string);
  }

  @return url("data:image/svg+xml,#{unquote(fs-url-encode($svg))}");
}
// Requires ‚Äústr-replace‚Äù and ‚Äúfs-url-encode‚Äù

// Mixins
//---------------------------------
/// Absolutely position an element and fill available space
/// @group Main
@mixin fs-absolute-fill {
  height: 100%;
  left: 0;
  position: absolute;
  top: 0;
  width: 100%;
}

////
/// @author Hugo Giraudel
/// @link http://codepen.io/SitePoint/pen/dppJzX/
////
/// Computes the height of the tilted pseudo-element based on the given angle
/// @access private
//  b ‚ó£c
//    a
@function fs-triangle-height($angle) {
  $a: 100;// width is 100%
  $opposite-angle: (90deg - $angle);

  // hypotenuse
  $c: math.div($a, fs-strip-unit(fs-sin($opposite-angle)));

  // calculate height using Pythagorean theorem
  $b: fs-sqrt(fs-pow($c, 2) - fs-pow($a, 2));

  // convert to percentage
  @return (abs($b) * 1%);
}

/// Apply an angled edge using a pseudo-element with a diagonal background
/// @group Main
/// @param {Angle} $angle - Angle
/// @param {Color} $color - Background color
/// @param {String} $position ['top'] - Either `top` or `bottom`
/// @param {String} $pseudo ['before'] - Either `before` or `after`
@mixin fs-angle($angle, $color, $position: 'top', $pseudo: 'before') {
  $height-ratio: fs-triangle-height($angle);
  background-color: $color;
  position: relative;

  &:#{$pseudo} {
    content: '';
    left: 0;
    padding-top: $height-ratio;
    position: absolute;
    width: 100%;

    // 1. Use rgba() instead of ‚Äútransparent‚Äù for Safari
    // http://stackoverflow.com/a/30674347/673457
    @if ($position == 'top') {
      background-image: linear-gradient($angle, $color 50%, rgba($color, 0) 50%);
      bottom: 100%;
    }
    @else {
      background-image: linear-gradient($angle, rgba($color, 0) 50%, $color 50%);
      top: 100%;
    }
  }
}

/// Maintain aspect ratio
/// @group Main
/// @param {Number} $ratio - Aspect ratio (width / height)
///
/// @example scss - 16:9 aspect ratio
///   .foo {
///     @include fs-aspect-ratio(16/9);
///   }
///
@mixin fs-aspect-ratio($ratio) {
  display: block;
  overflow: hidden;
  position: relative;

  &:before {
    content: '';
    display: block;
    padding-top: percentage(math.div(1, $ratio));
  }
}

/// Burger menu icon mixin
/// @group Main
/// @param {Number} $width [30px] - Icon width
/// @param {Number} $height [5px] - Bar height
/// @param {Number} $gutter [3px] - Gap between bars
/// @param {Color} $color [currentColor] - Icon color
/// @param {Number} $border-radius [0] - Border radius
/// @param {Number} $transition-duration [300ms] - Transition duration
/// @author Joren Van Hee
/// @link https://github.com/jorenvanhee/sass-burger
///
/// @example scss
///   .icon {
///     @include fs-burger(
///       $color: #fff,
///       $gutter: 3px,
///       $height: 3px,
///       $transition-duration: 200ms,
///       $width: 20px
///     );
///
@mixin fs-burger(
  $width: 30px,
  $height: 5px,
  $gutter: 3px,
  $color: currentColor,
  $border-radius: 0,
  $transition-duration: 300ms
) {
  $burger-height: $height !global;
  $burger-gutter: $gutter !global;
  margin-bottom: $height + $gutter;
  margin-top: $height + $gutter;
  position: relative;
  user-select: none;

  // Burger parts
  // (---) top    -> &::before
  // [---] middle -> &
  // (---) bottom -> &::after
  &,
  &::before,
  &::after {
    background-color: $color;
    @if $border-radius != 0 {
      border-radius: $border-radius;
    }
    height: $height;
    transition-duration: $transition-duration;
    transition-property: background-color, transform;
    width: $width;
  }

  &::before,
  &::after {
    content: '';
    left: 0;
    position: absolute;
  }

  &::before {
    top: -($height + $gutter);
  }

  &::after {
    top: $height + $gutter;
  }
}

// Animate burger icon to a cross
/// @group Main
///
/// @example scss
///   .icon {
///     @include fs-burger(
///       $color: #fff,
///       $gutter: 3px,
///       $height: 3px,
///       $transition-duration: 200ms,
///       $width: 20px
///     );
///
///     &.is-active {
///       @include fs-burger-to-cross;
///     }
///   }
///
@mixin fs-burger-to-cross($color: auto) {
  & {
    background-color: transparent;
  }

  @if ($color != auto) {
    &:before,
    &:after {
      background-color: $color;
    }
  }

  &:before {
    transform: translateY($burger-gutter + $burger-height) rotate(45deg);
  }

  &:after {
    transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
  }
}

/// Clears floats in IE 8+
/// @group Main
/// @link http://nicolasgallagher.com/micro-clearfix-hack/
/// @link https://css-tricks.com/snippets/css/clear-fix/
/// @ignore Consider replacing with ‚Äúdisplay: flow-root‚Äù once support is broad enough.
/// @ignore https://caniuse.com/#feat=flow-root
@mixin fs-clearfix {
  &:after {
    clear: both;
    content: '';
    display: table;
  }
}

/// Warn if the contrast is below a threshold
/// @group Main
/// @param {color} $color1 background color
/// @param {color} $color2 foreground color
/// @param {number} $threshold [4.5] - Minimum contrast threshold
/// @link https://github.com/xi/sass-planifolia/blob/master/sass/contrast.scss
/// @link https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html
/// @require {function} fs-color-contrast
@mixin fs-contrast-test($color1, $color2, $threshold: 4.5) {
  $contrast: fs-color-contrast($color1, $color2);

  @if $contrast < $threshold {
    @warn '‚ö†Ô∏è  Low contrast: #{$color1}, #{$color2}, #{$contrast}';
  }
}

////
/// @group Sass Utils
////

/// Debug mode toggle
/// @type Boolean
$fs-debug-mode: false !default;

/// Debug helper to conditionally run code
/// @param {Boolean} $override - Manually override `$fs-debug-mode` value
/// @require {variable} $fs-debug-mode - Global debug mode flag
@mixin fs-debug($override: false) {
  @if ($fs-debug-mode or $override) {
    @content;
  }
}

/// Apply font smoothing in Safari, Chrome, and Firefox. Use sparringly!
/// @group Main
/// @param {Boolean} $enabled - Enable or disable smoothing
/// @link http://maximilianhoffmann.com/posts/better-font-rendering-on-osx
/// @link http://usabilitypost.com/2012/11/05/stop-fixing-font-smoothing/
@mixin fs-font-smoothing($enabled: true) {
  @if $enabled {
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
  }
  @else {
    -moz-osx-font-smoothing: auto;
    -webkit-font-smoothing: subpixel-antialiased;
  }
}

/// Hide text in element, requires setting height and width
/// @group Main
/// @link http://compass-style.org/reference/compass/typography/text/replacement/#mixin-hide-text
@mixin fs-hide-text {
  font-size: 0;
  overflow: hidden;
  text-indent: 110%;// > 100% prevents issues with inline-block elements
  white-space: nowrap;
}

/// Helper mixin to set link colors
/// @group Main
/// @param {Color} $static - Static link color
/// @param {Color} $visited [$static] - Visited link color (optional)
/// @param {Color} $attention - Hover/focus/active link color
///
/// @example scss
///   a {
///     @include fs-link-colors(
///       $static: blue,
///       $attention: red,
///       $visited: purple
///     );
///   }
///
@mixin fs-link-colors($static, $attention, $visited: false) {
  @if $visited {
    &,
    &:link {
      color: $static;
    }

    &:visited {
      color: $visited;
    }
  }
  @else {
    &,
    &:link,
    &:visited {
      color: $static;
    }
  }

  &:hover,
  &:focus,
  &:active {
    color: $attention;
  }
}

////
/// @group Main
////

/// Base media query mixin
/// @param {Number | Map} $conditions - Width or map of conditions
///
/// @example scss
///   @include fs-media((min-width: 600px)) {‚Ä¶}
///
///   @include fs-media((min-width: 600px, max-width: 900px, min-height: 500px, min-aspect-ratio: "1/1")) {‚Ä¶}
///
/// @ignore Convert units to ems when applicable http://zellwk.com/blog/media-query-units/
/// @ignore Note: EMs in media queries are relative to the initial browser font-size (16px) http://www.w3.org/TR/css3-mediaqueries/#units
/// @ignore Demo: http://www.sassmeister.com/gist/908ff8ee2e2e0b18f768fcbc87df385c
@mixin fs-media($conditions) {
  // Check if $conditions is a valid map
  @if type-of($conditions) != 'map' {
    @error 'üî¥ ‚Äú#{$conditions}‚Äù is not a valid Sass map';
  }
  @else {
    $mq-conditions: '';

    // Convert map to properly formatted media query string
    @each $type, $value in $conditions {

      // If value is a number, we may need to convert to ems
      @if type-of($value) == 'number' {

        // Convert px to em
        @if unit($value) == 'px' {
          $value: math.div($value, 16px) * 1em;
        }

        // Convert rem to em
        @else if unit($value) == 'rem' {
          $value: math.div($value, 1rem) * 1em;
        }
      }

      // Use str-insert() with -1 index to append value to the end
      $mq-conditions: str-insert($mq-conditions, 'and (#{$type}: #{$value}) ', -1);
    }

    // Output the media query
    @media all #{$mq-conditions} {
      @content;
    }
  }
}

/// Min-width media query helper
/// @require {mixin} fs-media
/// @param {Number} $width - Breakpoint width
///
/// @example scss
///   @include fs-min-width(960px) {‚Ä¶}
///
@mixin fs-min-width($width) {
  @include fs-media((min-width: $width)) {
    @content;
  }
}

/// Max-width media query helper
/// @require {mixin} fs-media
/// @param {Number} $width - Breakpoint width
///
/// @example scss
///   @include fs-max-width(960px) {‚Ä¶}
///
@mixin fs-max-width($width) {
  @include fs-media((max-width: $width)) {
    @content;
  }
}

/// Min-height media query helper
/// @require {mixin} fs-media
/// @param {Number} $height - Breakpoint height
///
/// @example scss
///   @include fs-min-height(500px) {‚Ä¶}
///
@mixin fs-min-height($height) {
  @include fs-media((min-height: $height)) {
    @content;
  }
}

/// Max-height media query helper
/// @require {mixin} fs-media
/// @param {Number} $height - Breakpoint height
///
/// @example scss
///   @include fs-max-height(500px) {‚Ä¶}
///
@mixin fs-max-height($height) {
  @include fs-media((max-height: $height)) {
    @content;
  }
}

////
/// @group Main
////

/// Hide in print view
@mixin fs-print-hide {
  // scss-lint:disable ImportantRule
  @media print {
    display: none !important;
  }
}

/// Only show in print view
@mixin fs-print-only {
  // scss-lint:disable ImportantRule
  display: none !important;

  @media print {
    display: block !important;
  }
}

////
/// Helper mixins to add various pseudo selectors
/// @group Selectors
/// @ignore http://sassmeister.com/gist/35c9c323d22eefdbf293 (by @csswizardry)
////

/// Helper mixin to apply static pesudo selectors
@mixin fs-static {
  &,
  &:link,
  &:visited {
    @content;
  }
}

/// Helper mixin to apply `:hover`, `:focus`, and `:active` pesudo selectors
@mixin fs-attention {
  &:hover,
  &:focus,
  &:active {
    @content;
  }
}

/// Helper mixin to apply all pesudo selectors
@mixin fs-all-states {
  &,
  &:link,
  &:visited,
  &:focus,
  &:hover,
  &:active {
    @content;
  }
}

////
/// Helper mixins to add various pseudo parent selectors
/// @group Selectors
/// @ignore http://sassmeister.com/gist/35c9c323d22eefdbf293 (by @csswizardry)
////

/// Helper mixin to apply static pesudo selectors to parent
@mixin fs-static-parent($parent:null) {
  // Return content if valid string
  @if type-of($parent) == 'string' {
    #{$parent} &,
    #{$parent}:link &,
    #{$parent}:visited & {
      @content;
    }
  }
  // Error if not a valid string
  @else {
    @error 'üî¥  fs-static-parent(#{inspect($parent)} is not a valid string';
  }
}

/// Helper mixin to apply `:hover`, `:focus`, and `:active` pesudo selectors to parent
@mixin fs-attention-parent($parent:null) {
  // Return content if valid string
  @if type-of($parent) == 'string' {
    #{$parent}:hover &,
    #{$parent}:focus &,
    #{$parent}:active & {
      @content;
    }
  }
  // Error if not a valid string
  @else {
    @error 'üî¥  fs-attention-parent(#{inspect($parent)} is not a valid string';
  }
}

/// Helper mixin to apply all pesudo selectors to parent
@mixin fs-all-states-parent($parent:null) {
  // Return content if valid string
  @if type-of($parent) == 'string' {
    #{$parent} &,
    #{$parent}:link &,
    #{$parent}:visited &,
    #{$parent}:focus &,
    #{$parent}:hover &,
    #{$parent}:active & {
      @content;
    }
  }
  // Error if not a valid string
  @else {
    @error 'üî¥  fs-all-states-parent(#{inspect($parent)} is not a valid string';
  }
}

/// Quantity query mixin
/// @group Main
/// @author Indrek Paas
/// @link http://sassmeister.com/gist/f48e5e34d329eaf44e37
/// @link http://alistapart.com/article/quantity-queries-for-css
/// @require {function} fs-to-number
/// @param {String | Number} $arg - Quantity query
///
/// @example scss
///   @include fs-quantity(8) {
///     /* Exactly 8 */
///   }
///
///   @include fs-quantity(8 12) {
///     /* At least 8 and at most 12 */
///   }
///
///   @include fs-quantity(odd) {
///     /* Odd quantity */
///   }
///
///   @include fs-quantity(even) {
///     /* Even quantity*/
///   }
///
///   @include fs-quantity('<8') {
///     /* Less than 8 */
///   }
///
///   @include fs-quantity('<=8') {
///     /* Less than or equal to 8 */
///   }
///
///   @include fs-quantity('>8') {
///     /* More than 8 */
///   }
///
///   @include fs-quantity('>=8') {
///     /* More than or equal to 8 */
///   }
///
@mixin fs-quantity($arg) {
  // Exactly N
  @if type-of($arg) == 'number' {
    &:nth-last-child(#{$arg}):first-child,
    &:nth-last-child(#{$arg}):first-child ~ & {
      @content;
    }
  }

  // At least N and at most N
  @else if type-of($arg) == 'list' {
    &:nth-last-child(n+#{nth($arg, 1)}):nth-last-child(-n+#{nth($arg, 2)}):first-child,
    &:nth-last-child(n+#{nth($arg, 1)}):nth-last-child(-n+#{nth($arg, 2)}):first-child ~ & {
      @content;
    }
  }

  @else if type-of($arg) == 'string' {
    // Odd/even
    @if $arg == 'odd' or $arg == 'even' {
      &:nth-last-child(#{$arg}):first-child,
      &:nth-last-child(#{$arg}):first-child ~ & {
        @content;
      }
    }

    // Less than...
    @else if str-slice($arg, 1, 1) == '<' {
      // Less than or equal to N
      @if str-slice($arg, 2, 2) == '=' {
        $arg: str-slice($arg, 3);

        &:nth-last-child(-n+#{$arg}):first-child,
        &:nth-last-child(-n+#{$arg}):first-child ~ & {
          @content;
        }
      }

      // Less than N
      @else {
        $arg: fs-to-number(str-slice($arg, 2));

        &:nth-last-child(-n+#{$arg - 1}):first-child,
        &:nth-last-child(-n+#{$arg - 1}):first-child ~ & {
          @content;
        }
      }
    }

    // More than...
    @else if str-slice($arg, 1, 1) == '>' {
      // More than or equal to N
      @if str-slice($arg, 2, 2) == '=' {
        $arg: str-slice($arg, 3);

        &:nth-last-child(n+#{$arg}),
        &:nth-last-child(n+#{$arg}) ~ & {
          @content;
        }
      }

      // More than N
      @else {
        $arg: fs-to-number(str-slice($arg, 2));

        &:nth-last-child(n+#{$arg + 1}),
        &:nth-last-child(n+#{$arg + 1}) ~ & {
          @content;
        }
      }
    }
  }
}

////
/// Reset default element styles
/// @group Main
////

/// Reset input styles
@mixin fs-reset-input {
  background-color: transparent;
  border: 0;
  margin: 0;
  padding: 0;
}

/// Reset button styles
@mixin fs-reset-button {
  @include fs-reset-input;
  background-image: none;// for Firefox mobile
  cursor: pointer;
  font-weight: normal;
  letter-spacing: 0;
  line-height: normal;
  text-align: left;
  text-shadow: none;
  text-transform: none;

  &:hover,
  &:focus,
  &:active {
    background-color: transparent;
  }
}


/// Reset textarea styles
@mixin fs-reset-textarea {
  border: 0;
  outline: 0;
  overflow: auto;
  resize: none;
  vertical-align: top;
}


/// Reset list styles
@mixin fs-reset-list {
  list-style-type: none;
  margin-bottom: 0;
  margin-top: 0;
  padding-left: 0;
}

////
/// @group Selectors
/// @link http://sass-lang.com/documentation/Sass/Script/Functions.html#selector_functions
////

/// Add selector to root (requires Sass 3.4+)
/// @param {String} $selector - Selector to add to root
///
/// @example scss
///   .foo {
///     @include fs-root-add(a) {
///       content: 'a.foo';
///     }
///
///     @include fs-root-add('.bar') {
///       content: '.foo.bar';
///     }
///   }
///
@mixin fs-root-add($selector) {
  @if function-exists(selector-append) {
    @at-root #{selector-append($selector, &)} {
      @content;
    }
  }
  @else {
    @error 'üî¥  selector-append() is not supported. Please upgrade to Sass 3.4+';
  }
}

/// Prepend selector (requires Sass 3.4+)
/// @param {String} $selector - Selector to insert before root
///
/// @example scss
///   .foo {
///     @include fs-root-before(a) {
///       content: 'a .foo';
///     }
///
///     @include fs-root-before('.bar') {
///       content: '.bar .foo';
///     }
///   }
///
@mixin fs-root-before($selector) {
  @if function-exists(selector-nest) {
    @at-root #{selector-nest($selector, &)} {
      @content;
    }
  }
  @else {
    @error 'üî¥  selector-nest() is not supported. Please upgrade to Sass 3.4+';
  }
}

/// Helper to select all text input types
/// @group Selectors
@mixin fs-text-inputs {
  // scss-lint:disable QualifyingElement
  input[type='email'],
  input[type='number'],
  input[type='password'],
  input[type='search'],
  input[type='tel'],
  input[type='text'],
  input[type='url'] {
    @content;
  }
}

/// Helper for setting `text-rendering: optimizeLegibility;`
/// @group Main
/// @ignore Note: optimizeLegibility is buggy on Safari 5.1 for Windows
@mixin fs-text-optimize {
  text-rendering: optimizeLegibility;// Improve kerning and enable ligatures

  .webos & {
    text-rendering: auto;// Disable kerning for webOS http://bit.ly/1brNQpJ
  }
}

/// Triangle mixin (from Bourbon)
/// @group Main
/// @param {Number} $size - Height of triangle
/// @param {Color} $color - Hex color value
/// @param {String} $direction - Up, down, left, or right
/// @author https://github.com/thoughtbot
/// @link https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/addons/_triangle.scss
@mixin fs-triangle($size, $color, $direction) {
  height: 0;
  width: 0;
  $width: nth($size, 1);
  $height: nth($size, length($size));
  $foreground-color: nth($color, 1);
  $background-color: if(length($color) == 2, nth($color, 2), transparent);

  @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {
    $width: $width * 0.5;
    $height: if(length($size) > 1, $height, $height * 0.5);

    @if $direction == up {
      border-bottom: $height solid $foreground-color;
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-top-width: 0;
    }
    @else if $direction == right {
      border-bottom: $width solid $background-color;
      border-left: $height solid $foreground-color;
      border-right-width: 0;
      border-top: $width solid $background-color;
    }
    @else if $direction == down {
      border-bottom-width: 0;
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-top: $height solid $foreground-color;
    }
    @else if $direction == left {
      border-bottom: $width solid $background-color;
      border-left-width: 0;
      border-right: $height solid $foreground-color;
      border-top: $width solid $background-color;
    }
  }

  @else if ($direction == up-right) or ($direction == up-left) {
    border-top: $height solid $foreground-color;

    @if $direction == up-right {
      border-left: $width solid $background-color;
    }
    @else if $direction == up-left {
      border-right: $width solid $background-color;
    }
  }

  @else if ($direction == down-right) or ($direction == down-left) {
    border-bottom: $height solid $foreground-color;

    @if $direction == down-right {
      border-left: $width solid $background-color;
    }
    @else if $direction == down-left {
      border-right: $width solid $background-color;
    }
  }
  @else if ($direction == inset-up) {
    border-color: $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $height $width;
  }
  @else if ($direction == inset-down) {
    border-color: $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $height $width;
  }
  @else if ($direction == inset-right) {
    border-color: $background-color $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $width $height;
  }
  @else if ($direction == inset-left) {
    border-color: $background-color $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $width $height;
  }
}

/// Vertically center an element
/// @group Main
/// @param {String} $position [relative] - Positioning
/// @link http://zerosixthree.se/vertical-align-anything-with-just-3-lines-of-css/
/// @ignore Note: May need to set `transform-style: preserve-3d;` on parent to prevent blurry text
@mixin fs-vert-center($position: relative) {
  position: $position;
  top: 50%;
  transform: translateY(-50%);

  .no-csstransforms & {
    position: static;
    top: auto;
  }
}

/// Reset vertical center styles
/// @group Main
@mixin fs-undo-vert-center {
  top: auto;
  transform: translateY(0);
}

/// Hide visually but still be available to screenreaders
/// @group Main
/// @link http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
/// @link https://github.com/h5bp/html5-boilerplate/blob/master/dist/css/main.css
/// @author Jonathan Snook
///
/// @ignore 1. For long content, line feeds are not interpreted as spaces and small width causes content to wrap 1 word per line:
/// @ignore https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe
@mixin fs-visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  white-space: nowrap; // [1]
  width: 1px;
}

/// Undo visually hidden styles
/// @group Main
@mixin fs-undo-visually-hidden {
  clip: auto;
  height: auto;
  margin: 0;
  overflow: visible;
  position: static;
  white-space: normal;
  width: auto;
}

/// Break long words, hyphenate if possible (requires `lang` attribute)
/// @group Main
/// @link http://kenneth.io/blog/2012/03/04/word-wrapping-hypernation-using-css/
/// @link https://justmarkup.com/log/2015/07/dealing-with-long-words-in-css/
/// @link http://caniuse.com/#feat=css-hyphens
/// @link http://caniuse.com/#feat=wordwrap
/// @ignore Demo http://jsbin.com/fubor
/// @ignore - Hyphenation not currently suported in Chrome, Opera, Android, or IE9-
/// @ignore - Hyphenation depends on dictionary, so requires lang attribute be set
/// @ignore - Setting "word-break: break-all" will disable hyphens in Firefox and IE10+
@mixin fs-break-word {
  hyphens: auto;// requires lang attribute be set on target element or ancestor
  overflow-wrap: break-word;
  word-wrap: break-word;
}


// Minxins with dependencies
/// Scale a value for any number of properites relative to the viewport width
/// @group Main
/// @param {String | List} $properties - Properties to scale
/// @param {Map} $map - Map of breakpoints and values
/// @param {Boolean} $initial [true] - Output initial value (not inside media query)
/// @param {String} $units ['rem'] - Output units
/// @require {function} fs-rem
/// @require {function} fs-scale
/// @require {mixin} fs-min-width
/// @require {mixin} fs-max-width
/// @ignore Demo https://www.sassmeister.com/gist/0743396617c2068ed202be11a6c1eb5e
/// @link http://www.sassmeister.com/gist/7f22e44ace49b5124eec
/// @link http://madebymike.com.au/writing/precise-control-responsive-typography/
/// @link https://zellwk.com/blog/viewport-based-typography/
/// @link http://codepen.io/indrekpaas/pen/VarLaJ?editors=1100
/// @link http://codepen.io/maranomynet/pen/ozNpXV?editors=1100
/// @link https://www.smashingmagazine.com/2016/05/fluid-typography/
/// @link https://github.com/Jakobud/poly-fluid-sizing
/// @example scss
///   @include fs-scale(font-size, (320px: 18px, 1024px: 38px));
/// @example scss
///   @include fs-scale(margin-bottom margin-top, (
///     320px: 18px,
///     768px: 26px,
///     1024px: 38px
///   ));
/// @example scss
///   @include fs-scale(font-size, (
///     320px: 18px,
///     800px: (32px 24px),// scale up from 18px‚Äì32px, then reset to 24px at 800px wide and scale up to 38px
///     1024px: 38px
///   ));
/// @example scss
///   @include fs-scale(font-size, (768px: 26px, 1024px: 38px), $initial: false);
/// @example scss
///   @include fs-scale(font-size, (768px: 26px, 1024px: 38px), $units: 'em');
@mixin fs-scale($args...) {
  /// TODO: In next major version, rename fs-scale-poly() as fs-scale() and delete this code.
  @if length($args) > 1 and type-of(nth($args, 2)) == 'map' {
    @include fs-scale-poly($args...);
  }
  @else {
    @include fs-scale-legacy($args...);
  }
}
// Requires ‚Äúmedia-query‚Äù
/// **‚ö†Ô∏è DEPRECATED:** use `fs-scale` instead.
/// Scale a value relative to the viewport width using `calc()` and viewport units
/// @group Main
/// @access private
/// @param {String | List} $properties - Properties to scale
/// @param {Number} $start - Starting value
/// @param {Number} $end - Ending value
/// @param {Number} $min-width - Starting viewport width
/// @param {Number} $max-width - Ending viewport width
/// @param {Boolean} $fallback [true] - Output starting value outside of media query
/// @param {String} $units ['rem'] - Output units
/// @require {function} fs-rem
/// @require {function} fs-scale
/// @require {mixin} fs-min-width
/// @require {mixin} fs-max-width
/// @ignore Demo https://www.sassmeister.com/gist/9f87f8c19e91c811831d84fc8484ed24
/// @link http://www.sassmeister.com/gist/7f22e44ace49b5124eec
/// @link http://madebymike.com.au/writing/precise-control-responsive-typography/
/// @link https://zellwk.com/blog/viewport-based-typography/
/// @link http://codepen.io/indrekpaas/pen/VarLaJ?editors=1100
/// @link http://codepen.io/maranomynet/pen/ozNpXV?editors=1100
/// @link https://www.smashingmagazine.com/2016/05/fluid-typography/
/// @example scss
///   @include fs-scale(font-size, 20px, 30px, 320px, 400px);
/// @example scss
///   @include fs-scale(margin-bottom margin-top, 10px, 20px, 500px, 600px);
@mixin fs-scale-legacy($properties, $start, $end, $min-width, $max-width, $fallback: true, $units: 'rem') {
  @warn 'Upgrade fs-scale() to new map syntax, fs-scale(#{$properties}, (#{$min-width}: #{$start}, #{$max-width}: #{$end}))';

  // Starting size
  @if $fallback {
    @each $property in $properties {
      @if $units == 'em' {
        #{$property}: fs-em($start);
      }
      @else {
        #{$property}: fs-rem($start);
      }
    }
  }

  // Scale up with calc()
  @include fs-min-width($min-width) {
    @each $property in $properties {
      #{$property}: fs-scale($start, $end, $min-width, $max-width, $units);
    }
  }

  // Final size
  @include fs-min-width($max-width) {
    @each $property in $properties {
      @if $units == 'em' {
        #{$property}: fs-em($end);
      }
      @else {
        #{$property}: fs-rem($end);
      }
    }
  }
}
// Requires ‚Äúfs-scale‚Äù
/// **‚ö†Ô∏è DEPRECATED:** use `fs-scale` instead.
/// Scale a value relative to the viewport width by generating media queries at set intervals
/// @group Main
/// @param {String} $property - Property to scale
/// @param {Number} $start - Starting value
/// @param {Number} $end - Ending value
/// @param {Number} $min-width - Starting viewport width
/// @param {Number} $max-width - Ending viewport width
/// @param {Number} $min-step [null] - Minimum increment to adjust value
/// @param {Number} $max-steps [10] - Maximum number of times to adjust the value
/// @require {mixin} fs-min-width
/// @ignore Demo https://www.sassmeister.com/gist/aafd476fd2e7671c92e2ebb47a431821
/// @ignore Inspired by http://www.bookcasey.com/fittext/
/// @link https://github.com/bookcasey/fittext
/// @example scss
///   @include fs-scale-mq(line-height, 1.7, 1.5, 320px, 450px, $min-step: 0.05);
@mixin fs-scale-mq($property, $start, $end, $min-width, $max-width, $min-step: null, $max-steps: 10) {
  @warn 'fs-scale-mq() is deprecated, use fs-scale(#{$property}, (#{$min-width}: #{$start}, #{$max-width}: #{$end}))';

  @if $min-width >= $max-width {
    @error 'üî¥  fs-scale-mq() max-width must be greater than min-width';
  }

  @if unit($start) != unit($end) {
    @error 'üî¥  fs-scale-mq() units don‚Äôt match';
  }

  @if $min-step != null and unit($min-step) != unit($start) {
    @error 'üî¥  $min-step units in fs-scale-mq() don‚Äôt match';
  }

  @if not unitless($max-steps) or type-of($max-steps) != 'number' {
    @error 'üî¥  $max-steps in fs-scale-mq() must be a unitless number';
  }

  @if $start == $end {
    @warn '‚ö†Ô∏è fs-scale-mq() values are the same';
  }

  // Multiplier used to control whether value should increase or descrease
  $sign: if($end < $start, -1, 1);

  // Total amount value will change
  $spread: abs($end - $start);

  // Number of times to adjust the value between $min-width and $max-width
  // Will adjust later if necessary based on $min-step value
  $steps: $max-steps;

  // Amount to increase/decrease the value at each step
  // Based on $max-steps by default, will adjust later if necessary based on $min-step value
  $step: math.div($spread, $max-steps);

  // If $min-step was defined, compare steps to $max-steps
  @if $min-step != null {

    // Only update steps count if $min-step amount results in fewer steps than $max-steps
    @if math.div($spread, $min-step) < $max-steps {
      $step: $min-step;
      $steps: math.div($spread, $min-step);
    }
  }

  // If $steps isn‚Äôt a whole number, round up
  // We will make sure this doesn‚Äôt result in extra code below
  $steps: ceil($steps);

  // Media query spread
  $mq-spread: $max-width - $min-width;

  // Calcuate media query step size
  $mq-step: round(math.div($max-width - $min-width, $steps));

  // Debug
  // content: 'spread: #{$spread}, steps: #{$steps}, step: #{$step}, mqSpread: #{$mq-spread}, mqStep: #{$mq-step}';

  // Starting value
  #{$property}: $start;

  // Generate media queries
  @for $i from 1 through $steps {
    $breakpoint: $min-width + ($mq-step * $i);
    $value: $start + ($sign * $step * $i);

    // Ensure we don‚Äôt output extra media queries due to rounding
    $is-below-cutoff: if($sign == 1, $value < $end, $value > $end);
    @if $breakpoint < $max-width and $is-below-cutoff {
      @include fs-min-width($breakpoint) {
        #{$property}: $value;
      }
    }
  }// end @for loop

  // Ending value
  @include fs-min-width($max-width) {
    #{$property}: $end;
  }
}
// Requires ‚Äúmedia-query‚Äù
/// Scale a value for any number of properites relative to the viewport width
/// @group Main
/// @access private
/// @ignore TODO: In next major version, rename fs-scale-poly() as fs-scale()
/// @param {String | List} $properties - Properties to scale
/// @param {Map} $map - Map of breakpoints and values
/// @param {Boolean} $initial [true] - Output initial value (not inside media query)
/// @param {String} $units ['rem'] - Output units
/// @require {function} fs-rem
/// @require {function} fs-scale
/// @require {mixin} fs-min-width
/// @require {mixin} fs-max-width
/// @ignore Demo https://www.sassmeister.com/gist/37c4f4876609516eebab247178ea4b3b
/// @link http://www.sassmeister.com/gist/7f22e44ace49b5124eec
/// @link http://madebymike.com.au/writing/precise-control-responsive-typography/
/// @link https://zellwk.com/blog/viewport-based-typography/
/// @link http://codepen.io/indrekpaas/pen/VarLaJ?editors=1100
/// @link http://codepen.io/maranomynet/pen/ozNpXV?editors=1100
/// @link https://www.smashingmagazine.com/2016/05/fluid-typography/
/// @link https://github.com/Jakobud/poly-fluid-sizing
@mixin fs-scale-poly($properties, $map, $initial: true, $units: 'rem') {
  $length: length($map);

  @if ($length < 2) {
    @error "fs-scale() requires at least two breakpoints";
  }

  $breakpoints: map-keys($map);
  $values: map-values($map);

  // Initial value
  $start-val: nth($values, 1);

  @if $initial {
    @each $property in $properties {
      @if $units == 'em' {
        #{$property}: fs-em($start-val);
      }
      @else {
        #{$property}: fs-rem($start-val);
      }
    }
  }

  // Scale up with calc() at each breakpoint
  @for $i from 1 through ($length - 1) {
    $start-breakpoint: nth($breakpoints, $i);
    $end-breakpoint: nth($breakpoints, $i + 1);
    $start-value: nth($values, $i);
    $end-value: nth($values, $i + 1);

    @if length($start-value) > 2 {
      @warn "fs-scale(): #{$start-breakpoint}: (#{$start-value}) contains too many values, only the first two will be used";
    }

    @if length($end-value) > 2 {
      @warn "fs-scale(): #{$end-breakpoint}: (#{$end-value}) contains too many values, only the first two will be used";
    }

    // If multiple start values exist, use the second one.
    // Note: The first value was the ending value in the previous media query.
    @if length($start-value) > 1 {
      // If multiple end values exist, use the first one.
      $new-end-value: if(length($end-value) > 1, nth($end-value, 1), $end-value);

      @include fs-min-width($start-breakpoint) {
        @each $property in $properties {
          #{$property}: fs-scale(nth($start-value, 2), $new-end-value, $start-breakpoint, $end-breakpoint, $units);
        }
      }
    }
    // If muliple ending values exist, use the first one.
    @else if length($end-value) > 1 {
      @include fs-min-width($start-breakpoint) {
        @each $property in $properties {
          #{$property}: fs-scale($start-value, nth($end-value, 1), $start-breakpoint, $end-breakpoint, $units);
        }
      }
    }
    // Single values
    @else {
      @include fs-min-width($start-breakpoint) {
        @each $property in $properties {
          #{$property}: fs-scale($start-value, $end-value, $start-breakpoint, $end-breakpoint, $units);
        }
      }
    }
  }

  // Final value
  $end-val: nth($values, $length);
  $end-breakpoint: nth($breakpoints, $length);

  @include fs-min-width($end-breakpoint) {
    @each $property in $properties {
      @if $units == 'em' {
        #{$property}: fs-em($end-val);
      }
      @else {
        #{$property}: fs-rem($end-val);
      }
    }
  }
}
// Requires ‚Äúfs-scale‚Äù
/// **‚ö†Ô∏è DEPRECATED:** use `fs-scale` instead.
/// Automatically scale font-size and line-height
/// @group Main
/// @require {mixin} fs-min-width - Min-width media query mixin
/// @param {Number | List} $start - Starting `font-size` and `line-height` (optional)
/// @param {Number | List} $end - Ending `font-size` and `line-height` (optional)
/// @param {Number} $font-increment [2px] - Font-size increment
/// @param {Number} $line-height-increment [0.1] - Line-height increment (optional)
/// @param {Number} $start-width [320px] - Starting viewport width
/// @param {Number} $end-width [1000px] - Ending viewport width
/// @param {Number} $context [$fs-base-font-size] - Base `font-size` (optional)
/// @param {String} $units ['%'] - `font-size` units (optional, defaults to `'%'`)
/// @require {function} fs-convert-units
/// @link https://github.com/bookcasey/fittext
///
/// @example scss
///   // Basic example
///   @include fs-scale-text(
///     $start: 32px,
///     $end: 50px,
///     $font-increment: 3px,
///     $start-width: 400px,
///     $end-width: 800px
///   );
///
///   // With line-height and custom units
///   @include fs-scale-text(
///     $start: 32px 1.25,
///     $end: 50px 1.1,
///     $font-increment: 3px,
///     $line-height-increment: 0.05,
///     $start-width: 400px,
///     $end-width: 800px,
///     $units: 'em'
///   );
///
@mixin fs-scale-text(
  $start,
  $end,
  $font-increment: 2px,
  $line-height-increment: 0.1,
  $start-width: 320px,
  $end-width: 1000px,
  $context: $fs-base-font-size,
  $units: '%'
) {
  @warn 'fs-scale-text() is deprecated, use fs-scale(#{$properties}, (#{$min-width}: #{$start}, #{$max-width}: #{$end}))';

  // Add vars at top to avoid scope issues
  $start-font-size: $start;
  $end-font-size: $end;
  $has-line-height: false;
  $start-line-height: inherit;
  $end-line-height: inherit;
  $line-height-diff: $line-height-increment;
  $line-height-sign: 1;
  $line-height-steps: 0;

  // Check for line-height
  @if length($start) == 2 and length($end) == 2 {
    $has-line-height: true;
  }

  // Update vars if line-height was specified
  @if $has-line-height {
    // Save font-sizes
    $start-font-size: nth($start, 1);
    $end-font-size: nth($end, 1);

    // Save line-height values
    $start-line-height: nth($start, 2);
    $end-line-height: nth($end, 2);
    $line-height-diff: $end-line-height - $start-line-height;

    // If no change in line-height, ignore it
    @if fs-strip-unit($line-height-diff) == 0 {
      $has-line-height: false;
    }
    @else {
      // Determine if line-height increaes or decreses
      $line-height-sign: math.div($line-height-diff, abs($line-height-diff));// returns 1 or -1
    }
  }

  // Validation
  //---------------------------------
  @if $end-font-size <= $start-font-size {
    @error 'üî¥  max font size must be greater than min font size for #{&}';
  }

  @if (unit($start-font-size) != 'px' or unit($end-font-size) != 'px') {
    @error 'üî¥  starting and ending font sizes must be in pixels for #{&}';
  }

  @if unit($font-increment) != 'px' {
    @error 'üî¥  font increment must be in pixels for #{&}';
  }

  @if unit($context) != 'px' {
    @error 'üî¥  font context size must be in pixels for #{&}';
  }

  @if type-of($start-width) == 'number' and type-of($end-width) == 'number' {
    @if $end-width <= $start-width {
      @error 'üî¥  ending width must be greater than starting width for #{&}';
    }
  }
  @else {
    @if type-of($start-width) != 'number' {
      @error 'üî¥  starting width must be a pixel value for #{&}';
    }

    @if type-of($end-width) != 'number' {
      @error 'üî¥  ending width must be a pixel value for #{&}';
    }
  }

  @if ($units != '%' and $units != 'em' and $units != 'rem' and $units != 'px') {
    @error 'üî¥  fs-scale-text() output units must be %, px, em, or rem  for #{&}';
  }

  // Output starting font-size for when fs-scale-text() used multiple times on the same element
  @include fs-min-width($start-width) {
    font-size: fs-convert-units($units, $start-font-size, $context);
    @if $has-line-height {
      line-height: $start-line-height;
    }
  }

  // Calculate how many times the font-size will need to be adjusted, rounded up to nearest whole number
  $font-size-steps: ceil(math.div($end-font-size - $start-font-size, $font-increment));

  // Warn if >10 breakpoints will be generated
  @if $fs-debug-mode and ($font-size-steps > 10) {
    @warn '‚ö†Ô∏è  #{$font-size-steps} breakpoints generated by fs-scale-text() for #{&}';
  }

  // Calculate the media query interval
  $font-size-mq-step: math.div($end-width - $start-width, $font-size-steps);

  // Determine how many font steps equals one line-height step (e.g. increase line-height every nth font steps)
  @if $has-line-height {
    $line-height-steps: abs(math.div($font-size-steps, math.div($line-height-diff, $line-height-increment)));
  }

  // If there are more line-height steps than font steps, adjust line-height increment so they are equal
  @if $line-height-steps < 1 {
    $line-height-increment: math.div($line-height-increment, $line-height-steps);
    $line-height-steps: 1;
  }

  // Define vars here for scope reasons
  $line-height-index: 1;
  $line-height: $start-line-height;

  // @debug 'üî∑ ' + $font-size-steps + ' font steps, ' + math.div($font-size-steps, $line-height-steps) + ' line-height step(s)';

  // Generate the media queries
  @for $i from 1 through $font-size-steps {
    // Calculate current breakpoint width
    $breakpoint: round($start-width + ($i * $font-size-mq-step));

    // Calculate current font-size
    $font-size: $start-font-size + ($i * $font-increment);

    // Don‚Äôt exceed $end-width (could happen due to rounding)
    @if $breakpoint > $end-width {
      // @debug 'üî¥ $breakpoint: ' + $breakpoint + ' exceeds $end-width: ' + $end-width;
      $breakpoint: $end-width;
    }

    // Since we rounded up $font-size-steps, the last font step may need to be reduced to prevent exceeding the target font size
    @if $font-size > $end-font-size {
      // @debug 'üî¥ Reduce last $font-increment from ' + $font-increment + ' to ' + ($font-increment - ($font-size - $end-font-size));
      $font-size: $end-font-size;
    }

    // Output font size styles
    @include fs-min-width($breakpoint) {
      // fs-convert-units() will output the correct unit based on $units
      font-size: fs-convert-units($units, $font-size, $context);

      @if ($has-line-height and $line-height-diff != 0) {

        // Check if current font step is equal to a line-height step (e.g. increase line-height every nth font steps)
        // NOTE: For some reason, putting $i first (e.g. ‚Äú>=‚Äù) results in false positives when the values are equal ¬Ø\_(„ÉÑ)_/¬Ø
        @if ($line-height-steps * $line-height-index) <= $i {

          // Calculate the line height ($line-height-sign used to increase/decrease the starting value)
          $line-height: $start-line-height + ($line-height-sign * $line-height-index * $line-height-increment);
          line-height: $line-height;

          // Increment line-height counter
          $line-height-index: $line-height-index + 1;

          // Output whenever the line-height is updated
          // @debug 'üî∂ Step ' + $i + ': font-size ' + $font-size + ', line-height ' +  $line-height + ', index=' + $line-height-index;
        }
        // If the last iteration, just output the $end-line-height instead of calculating it since it might exceed the final value due to rounding above
        @else if ($i == $font-size-steps) {
          // @debug '‚ö™Ô∏è line-height set to ending value of ' + $end-line-height + ' instead of calculated value of ' + ($start-line-height + ($line-height-sign * $line-height-index * $line-height-increment));
          line-height: $end-line-height;
        }
        @else {
          // Output when the font-size is updated but not the line-height
          // @debug 'üî∑ Step ' + $i + ': font-size ' + $font-size + ', line-height ' +  $line-height + ', index=' + $line-height-index;
        }
      }
    }
  }
}
// Requires ‚Äúmedia-query‚Äù and ‚Äúconvert-units‚Äù
